This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.editorconfig
.env.example
.gitattributes
.gitignore
app/Console/Commands/SendLoanReminders.php
app/Console/Kernel.php
app/Exceptions/Handler.php
app/Http/Controllers/ActivityLogController.php
app/Http/Controllers/Auth/AuthenticatedSessionController.php
app/Http/Controllers/Auth/ConfirmablePasswordController.php
app/Http/Controllers/Auth/EmailVerificationNotificationController.php
app/Http/Controllers/Auth/EmailVerificationPromptController.php
app/Http/Controllers/Auth/NewPasswordController.php
app/Http/Controllers/Auth/PasswordController.php
app/Http/Controllers/Auth/PasswordResetLinkController.php
app/Http/Controllers/Auth/RegisteredUserController.php
app/Http/Controllers/Auth/VerifyEmailController.php
app/Http/Controllers/CategoryController.php
app/Http/Controllers/Controller.php
app/Http/Controllers/DashboardController.php
app/Http/Controllers/ItemController.php
app/Http/Controllers/LoanController.php
app/Http/Controllers/PaymentController.php
app/Http/Controllers/PermissionController.php
app/Http/Controllers/ProfileController.php
app/Http/Controllers/ReservationController.php
app/Http/Controllers/RoleController.php
app/Http/Controllers/SearchController.php
app/Http/Controllers/UserController.php
app/Http/Controllers/UserValidationController.php
app/Http/Kernel.php
app/Http/Middleware/Authenticate.php
app/Http/Middleware/CheckPermission.php
app/Http/Middleware/EncryptCookies.php
app/Http/Middleware/PreventRequestsDuringMaintenance.php
app/Http/Middleware/RedirectIfAuthenticated.php
app/Http/Middleware/TrimStrings.php
app/Http/Middleware/TrustHosts.php
app/Http/Middleware/TrustProxies.php
app/Http/Middleware/ValidateSignature.php
app/Http/Middleware/VerifyCsrfToken.php
app/Http/Requests/Auth/LoginRequest.php
app/Mail/UserRejected.php
app/Mail/UserValidated.php
app/Models/ActivityLog.php
app/Models/Category.php
app/Models/Item.php
app/Models/ItemStatus.php
app/Models/Loan.php
app/Models/Payment.php
app/Models/Permission.php
app/Models/Reservation.php
app/Models/Role.php
app/Models/RolePermission.php
app/Models/User.php
app/Models/UserRole.php
app/Notifications/LoanDueReminder.php
app/Notifications/ReservationReadyNotification.php
app/Providers/AppServiceProvider.php
app/Providers/AuthServiceProvider.php
app/Providers/BroadcastServiceProvider.php
app/Providers/EventServiceProvider.php
app/Providers/RouteServiceProvider.php
app/Services/ActivityLogger.php
artisan
bootstrap/app.php
bootstrap/cache/.gitignore
composer.json
config/app.php
config/auth.php
config/broadcasting.php
config/cache.php
config/cors.php
config/database.php
config/filesystems.php
config/hashing.php
config/logging.php
config/mail.php
config/queue.php
config/sanctum.php
config/services.php
config/session.php
config/view.php
database/.gitignore
database/factories/ItemFactory.php
database/factories/UserFactory.php
database/factories/UsersFactory.php
database/migrations/2014_10_12_000000_create_users_table.php
database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php
database/migrations/2019_08_19_000000_create_failed_jobs_table.php
database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php
database/migrations/2025_03_07_185442_create_roles_table.php
database/migrations/2025_03_07_185443_create_permissions_table.php
database/migrations/2025_03_07_185444_create_role_permissions_table.php
database/migrations/2025_03_07_185457_create_categories_table.php
database/migrations/2025_03_07_185457_create_user_roles_table.php
database/migrations/2025_03_07_185458_create_item_statuses_table.php
database/migrations/2025_03_07_185458_create_items_table.php
database/migrations/2025_03_07_185459_create_loans_table.php
database/migrations/2025_03_07_185500_create_payments_table.php
database/migrations/2025_03_07_185500_create_reservations_table.php
database/migrations/2025_03_07_185502_create_activity_logs_table.php
database/seeders/AdminUserSeeder.php
database/seeders/CategoriesSeeder.php
database/seeders/DatabaseSeeder.php
database/seeders/ItemStatusSeeder.php
database/seeders/PermissionsSeeder.php
database/seeders/RolesSeeder.php
package.json
phpunit.xml
postcss.config.js
public/.htaccess
public/index.php
public/robots.txt
README.md
resources/css/app.css
resources/js/app.js
resources/js/bootstrap.js
resources/views/activity-logs/index.blade.php
resources/views/auth/login.blade.php
resources/views/auth/passwords/confirm.blade.php
resources/views/auth/passwords/email.blade.php
resources/views/auth/passwords/reset.blade.php
resources/views/auth/register.blade.php
resources/views/auth/verify-email.blade.php
resources/views/auth/verify.blade.php
resources/views/categories/create.blade.php
resources/views/categories/edit.blade.php
resources/views/categories/index.blade.php
resources/views/components/app-layout.blade.php
resources/views/components/button.blade.php
resources/views/components/dropdown-link.blade.php
resources/views/components/dropdown.blade.php
resources/views/components/nav-link.blade.php
resources/views/components/responsive-nav-link.blade.php
resources/views/components/table.blade.php
resources/views/components/td.blade.php
resources/views/components/th.blade.php
resources/views/dashboard/admin.blade.php
resources/views/dashboard/member.blade.php
resources/views/emails/users/rejected.blade.php
resources/views/emails/users/validated.blade.php
resources/views/home.blade.php
resources/views/items/create.blade.php
resources/views/items/edit.blade.php
resources/views/items/index.blade.php
resources/views/items/show.blade.php
resources/views/layouts/app.blade.php
resources/views/layouts/navigation.blade.php
resources/views/loans/create.blade.php
resources/views/loans/edit.blade.php
resources/views/loans/index.blade.php
resources/views/loans/show.blade.php
resources/views/payments/create.blade.php
resources/views/payments/index.blade.php
resources/views/permissions/index.blade.php
resources/views/profile/edit.blade.php
resources/views/reservations/create.blade.php
resources/views/reservations/index.blade.php
resources/views/reservations/show.blade.php
resources/views/roles/create.blade.php
resources/views/roles/edit.blade.php
resources/views/roles/index.blade.php
resources/views/roles/show.blade.php
resources/views/search/results.blade.php
resources/views/users/create.blade.php
resources/views/users/edit.blade.php
resources/views/users/index.blade.php
resources/views/users/show.blade.php
resources/views/users/validate.blade.php
resources/views/welcome.blade.php
routes/api.php
routes/App/Http/Controllers/Api/ItemController.php
routes/App/Http/Controllers/Api/UserController.php
routes/auth.php
routes/channels.php
routes/console.php
routes/web.php
storage/app/.gitignore
storage/app/public/.gitignore
storage/framework/.gitignore
storage/framework/cache/.gitignore
storage/framework/cache/data/.gitignore
storage/framework/sessions/.gitignore
storage/framework/testing/.gitignore
storage/framework/views/.gitignore
storage/logs/.gitignore
tailwind.config.js
tests/CreatesApplication.php
tests/Feature/ExampleTest.php
tests/TestCase.php
tests/Unit/ExampleTest.php
vite.config.js

================================================================
Files
================================================================

================
File: .editorconfig
================
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4

================
File: .env.example
================
APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

================
File: .gitattributes
================
* text=auto eol=lf

*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php

/.github export-ignore
CHANGELOG.md export-ignore
.styleci.yml export-ignore

================
File: .gitignore
================
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/vendor
.env
.env.backup
.env.production
Homestead.json
Homestead.yaml
auth.json
npm-debug.log
yarn-error.log
/.fleet
/.idea
/.vscode

================
File: app/Console/Commands/SendLoanReminders.php
================
<?php

namespace App\Console\Commands;

use App\Models\Loan;
use App\Notifications\LoanDueReminder;
use Carbon\Carbon;
use Illuminate\Console\Command;

class SendLoanReminders extends Command
{
    protected $signature = 'loans:send-reminders';
    protected $description = 'Send reminders for loans that are due soon or overdue';

    public function handle()
    {
        $today = Carbon::today();

        // Rappels pour les emprunts qui doivent être rendus dans 3 jours
        $this->sendReminders($today->copy()->addDays(3), 3);

        // Rappels pour les emprunts qui doivent être rendus aujourd'hui
        $this->sendReminders($today, 0);

        // Rappels pour les emprunts en retard de 2 jours
        $this->sendReminders($today->copy()->subDays(2), -2);

        $this->info('Loan reminders have been sent successfully.');

        return 0;
    }

    private function sendReminders($date, $daysRemaining)
    {
        $loans = Loan::whereNull('return_date')
            ->whereDate('due_date', $date)
            ->with(['user', 'item'])
            ->get();

        $this->info("Found {$loans->count()} loans due " . ($daysRemaining > 0 ? "in $daysRemaining days" : ($daysRemaining == 0 ? "today" : abs($daysRemaining) . " days ago")) . ".");

        foreach ($loans as $loan) {
            if ($loan->user) {
                $loan->user->notify(new LoanDueReminder($loan, $daysRemaining));
                $this->info("Reminder sent to {$loan->user->email} for {$loan->item->name}");
            }
        }
    }
}

================
File: app/Console/Kernel.php
================
<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     */
    protected function schedule(Schedule $schedule)
    {
        $schedule->command('loans:send-reminders')->dailyAt('09:00');
    }

    /**
     * Register the commands for the application.
     */
    protected function commands(): void
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}

================
File: app/Exceptions/Handler.php
================
<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }
}

================
File: app/Http/Controllers/ActivityLogController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\ActivityLog;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ActivityLogController extends Controller
{
    public function index(Request $request)
    {
        if (Auth::user()->hasPermission('view-all-activity-logs')) {
            $query = ActivityLog::with('user');
        } else {
            $query = ActivityLog::where('user_id', Auth::id());
        }

        if ($request->filled('user')) {
            $query->where('user_id', $request->user);
        }

        if ($request->filled('action')) {
            $query->where('action', $request->action);
        }

        if ($request->filled('date_from')) {
            $query->whereDate('created_at', '>=', $request->date_from);
        }

        if ($request->filled('date_to')) {
            $query->whereDate('created_at', '<=', $request->date_to);
        }

        $logs = $query->orderBy('created_at', 'desc')->paginate(20);

        $users = User::all();
        $actions = ActivityLog::select('action')->distinct()->pluck('action');

        return view('activity-logs.index', compact('logs', 'users', 'actions'));
    }
}

================
File: app/Http/Controllers/Auth/AuthenticatedSessionController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        // Vérifier si l'utilisateur est validé
        if (!Auth::user()->is_validated) {
            Auth::logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();

            return redirect()->route('login')
                ->with('error', 'Votre compte est en attente de validation par un administrateur.');
        }

        return redirect()->intended(RouteServiceProvider::HOME);
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}

================
File: app/Http/Controllers/Auth/ConfirmablePasswordController.php
================
<?php

namespace App\Http\Controllers\Auth;

class ConfirmablePasswordController
{

}

================
File: app/Http/Controllers/Auth/EmailVerificationNotificationController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request)
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(RouteServiceProvider::HOME);
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}

================
File: app/Http/Controllers/Auth/EmailVerificationPromptController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\Request;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request)
    {
        return $request->user()->hasVerifiedEmail()
            ? redirect()->intended(RouteServiceProvider::HOME)
            : view('auth.verify-email');
    }
}

================
File: app/Http/Controllers/Auth/NewPasswordController.php
================
<?php
namespace App\Http\Controllers\Auth;

class NewPasswordController
{
}

================
File: app/Http/Controllers/Auth/PasswordController.php
================
<?php

namespace App\Http\Controllers\Auth;

class PasswordController
{

}

================
File: app/Http/Controllers/Auth/PasswordResetLinkController.php
================
<?php

namespace App\Http\Controllers\Auth;

class PasswordResetLinkController
{
}

================
File: app/Http/Controllers/Auth/RegisteredUserController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\Role;
use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'is_validated' => false, // Par défaut, non validé
        ]);

        // Attribue le rôle "Adhérent" par défaut
        $memberRole = Role::where('slug', 'adherent')->first();
        if ($memberRole) {
            $user->roles()->attach($memberRole->id);
        }

        event(new Registered($user));

        // Ne pas connecter l'utilisateur automatiquement s'il a besoin d'être validé
        if (!$memberRole || !$memberRole->requires_validation) {
            Auth::login($user);
            return redirect(RouteServiceProvider::HOME);
        }

        return redirect()->route('login')
            ->with('success', 'Votre compte a été créé avec succès et sera activé après validation par un administrateur.');
    }
}

================
File: app/Http/Controllers/Auth/VerifyEmailController.php
================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request)
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(RouteServiceProvider::HOME.'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(RouteServiceProvider::HOME.'?verified=1');
    }
}

================
File: app/Http/Controllers/CategoryController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Category;
use App\Services\ActivityLogger;
use Illuminate\Http\Request;
use Illuminate\Support\Str;

class CategoryController extends Controller
{
    public function index()
    {
        $categories = Category::all();
        return view('categories.index', compact('categories'));
    }

    public function create()
    {
        return view('categories.create');
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        $category = Category::create([
            'name' => $request->name,
            'slug' => Str::slug($request->name),
            'description' => $request->description,
        ]);

        ActivityLogger::log('Création', 'Catégorie', $category->id);

        return redirect()->route('categories.index')
            ->with('success', 'Catégorie créée avec succès.');
    }

    public function show(Category $category)
    {
        return view('categories.show', compact('category'));
    }

    public function edit(Category $category)
    {
        return view('categories.edit', compact('category'));
    }

    public function update(Request $request, Category $category)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        $category->update([
            'name' => $request->name,
            'slug' => Str::slug($request->name),
            'description' => $request->description,
        ]);

        ActivityLogger::log('Modification', 'Catégorie', $category->id);

        return redirect()->route('categories.index')
            ->with('success', 'Catégorie mise à jour avec succès.');
    }

    public function destroy(Category $category)
    {
        if ($category->items()->count() > 0) {
            return back()->with('error', 'Impossible de supprimer cette catégorie car elle contient des objets.');
        }

        $category->delete();
        ActivityLogger::log('Suppression', 'Catégorie', $category->id);

        return redirect()->route('categories.index')
            ->with('success', 'Catégorie supprimée avec succès.');
    }
}

================
File: app/Http/Controllers/Controller.php
================
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}

================
File: app/Http/Controllers/DashboardController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Category;
use App\Models\Item;
use App\Models\Loan;
use App\Models\Payment;
use App\Models\Reservation;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class DashboardController extends Controller
{
    public function index()
    {
        $user = Auth::user();

        // Si l'utilisateur est un simple membre (pas administrateur ni bénévole)
        if (!$user->hasPermission('create-loan') && !$user->hasPermission('edit-role-permissions')) {
            return $this->memberDashboard($user);
        }

        // Sinon, afficher le tableau de bord complet pour les bénévoles et administrateurs
        return $this->adminDashboard();
    }

    private function memberDashboard($user)
    {
        // Emprunts actifs de l'utilisateur
        $activeLoans = Loan::with('item')
            ->where('user_id', $user->id)
            ->whereNull('return_date')
            ->orderBy('due_date')
            ->get();

        // Réservations actives de l'utilisateur
        $activeReservations = Reservation::with('item')
            ->where('user_id', $user->id)
            ->where('is_active', true)
            ->orderBy('priority_order')
            ->get();

        // Historique des emprunts récents
        $recentLoans = Loan::with('item')
            ->where('user_id', $user->id)
            ->whereNotNull('return_date')
            ->orderBy('return_date', 'desc')
            ->limit(5)
            ->get();

        // Cotisation active
        $activeMembership = Payment::where('user_id', $user->id)
            ->where('type', 'membership')
            ->where(function($query) {
                $query->whereNull('expiry_date')
                    ->orWhere('expiry_date', '>=', now());
            })
            ->orderBy('expiry_date', 'desc')
            ->first();

        // Total des cautions versées
        $totalCaution = Payment::where('user_id', $user->id)
            ->where('type', 'caution')
            ->sum('amount');

        // Date d'adhésion (premier paiement)
        $firstPayment = Payment::where('user_id', $user->id)
            ->orderBy('payment_date')
            ->first();

        // Statistiques personnelles
        $stats = [
            'active_loans_count' => $activeLoans->count(),
            'reservations_count' => $activeReservations->count(),
            'total_loans_count' => Loan::where('user_id', $user->id)->count(),
            'late_returns_count' => Loan::where('user_id', $user->id)
                ->whereNull('return_date')
                ->whereDate('due_date', '<', now())
                ->count()
        ];

        return view('dashboard.member', compact(
            'activeLoans',
            'activeReservations',
            'recentLoans',
            'activeMembership',
            'totalCaution',
            'firstPayment',
            'stats'
        ));
    }

    private function adminDashboard()
    {
        // Code actuel du tableau de bord pour administrateurs et bénévoles
        // Statistiques générales
        $stats = [
            'total_items' => Item::where('is_archived', false)->count(),
            'items_on_loan' => Item::whereHas('status', function($query) {
                $query->where('slug', 'on-loan');
            })->count(),
            'available_items' => Item::whereHas('status', function($query) {
                $query->where('slug', 'in-stock');
            })->count(),
            'pending_returns' => Loan::whereNull('return_date')
                ->whereDate('due_date', '<', now())
                ->count(),
            'active_reservations' => Reservation::where('is_active', true)->count(),
            'pending_validations' => User::where('is_validated', false)->count(),
        ];

        // Prochains retours (prochains 7 jours)
        $upcomingReturns = Loan::with(['user', 'item'])
            ->whereNull('return_date')
            ->whereDate('due_date', '>=', now())
            ->whereDate('due_date', '<=', now()->addDays(7))
            ->orderBy('due_date')
            ->limit(5)
            ->get();

        // Emprunts en retard
        $overdueLoans = Loan::with(['user', 'item'])
            ->whereNull('return_date')
            ->whereDate('due_date', '<', now())
            ->orderBy('due_date')
            ->limit(5)
            ->get();

        // Catégories les plus populaires
        $popularCategories = Category::withCount(['items' => function($query) {
            $query->whereHas('loans', function($q) {
                $q->whereNull('return_date');
            });
        }])
            ->orderByDesc('items_count')
            ->limit(5)
            ->get();

        // Données pour graphique utilisateurs
        $userStats = User::select(
            DB::raw('DATE_FORMAT(created_at, "%Y-%m") as month'),
            DB::raw('count(*) as count')
        )
            ->where('created_at', '>=', now()->subMonths(6))
            ->groupBy('month')
            ->orderBy('month')
            ->get()
            ->toArray();

        // S'assurer que tous les mois sont inclus même s'il n'y a pas de données
        $userChartData = $this->fillMissingMonths($userStats, 6);

        // Données pour graphique emprunts
        $loanStats = Loan::select(
            DB::raw('DATE_FORMAT(loan_date, "%Y-%m") as month'),
            DB::raw('count(*) as count')
        )
            ->where('loan_date', '>=', now()->subMonths(6))
            ->groupBy('month')
            ->orderBy('month')
            ->get()
            ->toArray();

        $loanChartData = $this->fillMissingMonths($loanStats, 6);

        // Emprunts actifs par jour pour les 30 derniers jours
        $activeLoansData = [];
        for ($i = 0; $i <= 30; $i++) {
            $date = now()->subDays($i)->format('Y-m-d');
            $count = Loan::where('loan_date', '<=', $date)
                ->where(function($query) use ($date) {
                    $query->whereNull('return_date')
                        ->orWhere('return_date', '>', $date);
                })
                ->count();

            $activeLoansData[now()->subDays($i)->format('Y-m-d')] = $count;
        }

        $activeLoanChartData = [
            'labels' => array_keys(array_reverse($activeLoansData)),
            'data' => array_values(array_reverse($activeLoansData))
        ];

        return view('dashboard.admin', compact(
            'stats',
            'upcomingReturns',
            'overdueLoans',
            'popularCategories',
            'userChartData',
            'loanChartData',
            'activeLoanChartData'
        ));
    }

    private function fillMissingMonths($data, $monthCount)
    {
        $months = [];
        $result = ['labels' => [], 'data' => []];

        // Initialiser tous les mois à 0
        for ($i = $monthCount - 1; $i >= 0; $i--) {
            $month = now()->subMonths($i)->format('Y-m');
            $months[$month] = 0;
        }

        // Remplir avec les données réelles
        foreach ($data as $item) {
            if (isset($months[$item['month']])) {
                $months[$item['month']] = $item['count'];
            }
        }

        // Formater pour Chart.js
        foreach ($months as $month => $count) {
            $result['labels'][] = Carbon::createFromFormat('Y-m', $month)->format('M Y');
            $result['data'][] = $count;
        }

        return $result;
    }
}

================
File: app/Http/Controllers/ItemController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Category;
use App\Models\Item;
use App\Models\ItemStatus;
use App\Services\ActivityLogger;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class ItemController extends Controller
{

    public function index(Request $request)
    {
        $query = Item::with(['category', 'status']);

        // Gestion de l'affichage des objets archivés
        if ($request->filled('show_archived') && $request->show_archived == 1) {
            $query->where('is_archived', true);
        } else {
            $query->where('is_archived', false);
        }

        // Filtres restants
        if ($request->filled('category')) {
            $query->where('category_id', $request->category);
        }

        if ($request->filled('status')) {
            $query->where('item_status_id', $request->status);
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                    ->orWhere('identifier', 'like', "%{$search}%")
                    ->orWhere('description', 'like', "%{$search}%");
            });
        }

        $items = $query->paginate(15);
        $categories = Category::all();
        $statuses = ItemStatus::all();

        return view('items.index', compact('items', 'categories', 'statuses'));
    }

    public function create()
    {
        $categories = Category::all();
        $statuses = ItemStatus::all();
        return view('items.create', compact('categories', 'statuses'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'identifier' => 'required|string|max:255|unique:items',
            'description' => 'nullable|string',
            'category_id' => 'required|exists:categories,id',
            'item_status_id' => 'required|exists:item_statuses,id',
            'caution_amount' => 'required|numeric|min:0',
            'image' => 'nullable|image|max:2048',
            'notes' => 'nullable|string',
        ]);

        $data = $request->except('image');

        if ($request->hasFile('image')) {
            $path = $request->file('image')->store('items', 'public');
            $data['image_path'] = $path;
        }

        $item = Item::create($data);
        ActivityLogger::log('Création', 'Objet', $item->id);

        return redirect()->route('items.index')
            ->with('success', 'Objet créé avec succès.');
    }

    public function show(Item $item)
    {
        $item->load(['category', 'status']);

        // Si l'utilisateur a le droit de voir l'historique
        if (auth()->user()->hasPermission('view-item-history')) {
            $item->load(['loans' => function ($query) {
                $query->orderBy('loan_date', 'desc')->limit(10);
            }, 'loans.user', 'reservations' => function ($query) {
                $query->where('is_active', true)->orderBy('priority_order');
            }, 'reservations.user']);
        }

        return view('items.show', compact('item'));
    }

    public function edit(Item $item)
    {
        $categories = Category::all();
        $statuses = ItemStatus::all();
        return view('items.edit', compact('item', 'categories', 'statuses'));
    }

    public function update(Request $request, Item $item)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'identifier' => 'required|string|max:255|unique:items,identifier,' . $item->id,
            'description' => 'nullable|string',
            'category_id' => 'required|exists:categories,id',
            'item_status_id' => 'required|exists:item_statuses,id',
            'caution_amount' => 'required|numeric|min:0',
            'image' => 'nullable|image|max:2048',
            'notes' => 'nullable|string',
        ]);

        $data = $request->except('image');

        if ($request->hasFile('image')) {
            // Supprimer l'ancienne image si elle existe
            if ($item->image_path) {
                Storage::disk('public')->delete($item->image_path);
            }

            $path = $request->file('image')->store('items', 'public');
            $data['image_path'] = $path;
        }

        $item->update($data);
        ActivityLogger::log('Modification', 'Objet', $item->id);

        return redirect()->route('items.show', $item)
            ->with('success', 'Objet mis à jour avec succès.');
    }

    public function destroy(Item $item)
    {
        // Vérifier s'il y a des emprunts en cours
        if ($item->activeLoans()->count() > 0) {
            return back()->with('error', 'Impossible d\'archiver cet objet car il est actuellement emprunté.');
        }

        // Archiver plutôt que supprimer
        $item->update([
            'is_archived' => true,
            'item_status_id' => ItemStatus::where('slug', 'temporarily-unavailable')->first()->id
        ]);

        ActivityLogger::log('Archivage', 'Objet', $item->id);

        return redirect()->route('items.index')
            ->with('success', 'Objet archivé avec succès.');
    }

    public function duplicate(Item $item)
    {
        $newItem = $item->replicate();
        $newItem->identifier = $item->identifier . '-copy-' . time();
        $newItem->save();

        ActivityLogger::log('Copie', 'Objet', $newItem->id, 'Copié depuis l\'objet #' . $item->id);

        return redirect()->route('items.edit', $newItem)
            ->with('success', 'Objet dupliqué avec succès. Vous pouvez maintenant le modifier.');
    }
}

================
File: app/Http/Controllers/LoanController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Item;
use App\Models\ItemStatus;
use App\Models\Loan;
use App\Models\User;
use App\Services\ActivityLogger;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class LoanController extends Controller
{
    public function index(Request $request)
    {
        $query = Loan::with(['user', 'item']);

        if ($request->filled('status')) {
            if ($request->status === 'active') {
                $query->whereNull('return_date');
            } elseif ($request->status === 'returned') {
                $query->whereNotNull('return_date');
            }
        }

        if ($request->filled('user')) {
            $query->where('user_id', $request->user);
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->whereHas('item', function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                    ->orWhere('identifier', 'like', "%{$search}%");
            });
        }

        $loans = $query->orderBy('loan_date', 'desc')->paginate(15);
        $users = User::all();

        return view('loans.index', compact('loans', 'users'));
    }

    public function create()
    {
        $users = User::whereHas('roles', function($query) {
            $query->whereHas('permissions', function($q) {
                $q->where('slug', 'reserve-item');
            });
        })->get();

        $items = Item::whereHas('status', function($query) {
            $query->where('slug', 'in-stock');
        })->get();

        return view('loans.create', compact('users', 'items'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'item_id' => 'required|exists:items,id',
            'loan_date' => 'required|date',
            'due_date' => 'required|date|after_or_equal:loan_date',
            'notes' => 'nullable|string',
        ]);

        // Vérifier si l'objet est disponible
        $item = Item::findOrFail($request->item_id);
        if ($item->status->slug !== 'in-stock') {
            return back()->with('error', 'Cet objet n\'est pas disponible pour l\'emprunt.')
                ->withInput();
        }

        $loan = Loan::create([
            'user_id' => $request->user_id,
            'item_id' => $request->item_id,
            'loan_date' => $request->loan_date,
            'due_date' => $request->due_date,
            'notes' => $request->notes,
            'created_by' => Auth::id(),
        ]);

        // Mettre à jour le statut de l'objet
        $onLoanStatus = ItemStatus::where('slug', 'on-loan')->first();
        $item->update(['item_status_id' => $onLoanStatus->id]);

        ActivityLogger::log('Enregistrement', 'Emprunt', $loan->id);

        return redirect()->route('loans.index')
            ->with('success', 'Emprunt enregistré avec succès.');
    }

    public function show(Loan $loan)
    {
        return view('loans.show', compact('loan'));
    }

    public function edit(Loan $loan)
    {
        $users = User::whereHas('roles', function($query) {
            $query->whereHas('permissions', function($q) {
                $q->where('slug', 'reserve-item');
            });
        })->get();

        return view('loans.edit', compact('loan', 'users'));
    }

    public function update(Request $request, Loan $loan)
    {
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'loan_date' => 'required|date',
            'due_date' => 'required|date|after_or_equal:loan_date',
            'notes' => 'nullable|string',
        ]);

        $loan->update([
            'user_id' => $request->user_id,
            'loan_date' => $request->loan_date,
            'due_date' => $request->due_date,
            'notes' => $request->notes,
            'updated_by' => Auth::id(),
        ]);

        ActivityLogger::log('Modification', 'Emprunt', $loan->id);

        return redirect()->route('loans.index')
            ->with('success', 'Emprunt mis à jour avec succès.');
    }

    public function destroy(Loan $loan)
    {
        // Si le prêt n'est pas encore retourné, il faut d'abord remettre l'objet en stock
        if (!$loan->return_date) {
            $inStockStatus = ItemStatus::where('slug', 'in-stock')->first();
            $loan->item->update(['item_status_id' => $inStockStatus->id]);
        }

        $loan->delete();
        ActivityLogger::log('Suppression', 'Emprunt', $loan->id);

        return redirect()->route('loans.index')
            ->with('success', 'Emprunt supprimé avec succès.');
    }

    public function returnItem(Request $request, Loan $loan)
    {
        // Vérifier si le prêt est déjà retourné
        if ($loan->return_date) {
            return back()->with('error', 'Cet emprunt a déjà été retourné.');
        }

        $loan->update([
            'return_date' => Carbon::now(),
            'updated_by' => Auth::id(),
        ]);

        // Mettre à jour le statut de l'objet
        $inStockStatus = ItemStatus::where('slug', 'in-stock')->first();
        $loan->item->update(['item_status_id' => $inStockStatus->id]);

        // Vérifier s'il y a des réservations en attente
        $pendingReservation = $loan->item->reservations()->where('is_active', true)->orderBy('priority_order')->first();
        if ($pendingReservation) {
            // Changer le statut de l'objet à réservé
            $reservedStatus = ItemStatus::where('slug', 'reserved')->first();
            $loan->item->update(['item_status_id' => $reservedStatus->id]);

            // Envoyer une notification (à implémenter plus tard)
        }

        ActivityLogger::log('Retour', 'Emprunt', $loan->id);

        return redirect()->route('loans.index')
            ->with('success', 'Retour enregistré avec succès.');
    }

    public function extend(Request $request, Loan $loan)
    {
        $request->validate([
            'due_date' => 'required|date|after:' . $loan->due_date,
        ]);

        $loan->update([
            'due_date' => $request->due_date,
            'updated_by' => Auth::id(),
        ]);

        ActivityLogger::log('Prolongation', 'Emprunt', $loan->id);

        return redirect()->route('loans.show', $loan)
            ->with('success', 'Emprunt prolongé avec succès.');
    }
}

================
File: app/Http/Controllers/PaymentController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Payment;
use App\Models\User;
use App\Services\ActivityLogger;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class PaymentController extends Controller
{
    public function index(Request $request)
    {
        $query = Payment::with('user');

        if ($request->filled('user')) {
            $query->where('user_id', $request->user);
        }

        if ($request->filled('type')) {
            $query->where('type', $request->type);
        }

        if ($request->filled('date_from')) {
            $query->whereDate('payment_date', '>=', $request->date_from);
        }

        if ($request->filled('date_to')) {
            $query->whereDate('payment_date', '<=', $request->date_to);
        }

        $payments = $query->orderBy('payment_date', 'desc')->paginate(15);
        $users = User::all();

        return view('payments.index', compact('payments', 'users'));
    }

    public function create()
    {
        $users = User::all();
        return view('payments.create', compact('users'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'type' => 'required|in:membership,caution,donation',
            'amount' => 'required|numeric|min:0',
            'payment_date' => 'required|date',
            'expiry_date' => 'nullable|date|after_or_equal:payment_date',
            'notes' => 'nullable|string',
        ]);

        $payment = Payment::create([
            'user_id' => $request->user_id,
            'type' => $request->type,
            'amount' => $request->amount,
            'payment_date' => $request->payment_date,
            'expiry_date' => $request->expiry_date,
            'notes' => $request->notes,
            'created_by' => Auth::id(),
        ]);

        ActivityLogger::log('Création', 'Paiement', $payment->id);

        return redirect()->route('payments.index')
            ->with('success', 'Paiement enregistré avec succès.');
    }

    public function show(Payment $payment)
    {
        return view('payments.show', compact('payment'));
    }

    public function edit(Payment $payment)
    {
        $users = User::all();
        return view('payments.edit', compact('payment', 'users'));
    }

    public function update(Request $request, Payment $payment)
    {
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'type' => 'required|in:membership,caution,donation',
            'amount' => 'required|numeric|min:0',
            'payment_date' => 'required|date',
            'expiry_date' => 'nullable|date|after_or_equal:payment_date',
            'notes' => 'nullable|string',
        ]);

        $payment->update([
            'user_id' => $request->user_id,
            'type' => $request->type,
            'amount' => $request->amount,
            'payment_date' => $request->payment_date,
            'expiry_date' => $request->expiry_date,
            'notes' => $request->notes,
            'updated_by' => Auth::id(),
        ]);

        ActivityLogger::log('Modification', 'Paiement', $payment->id);

        return redirect()->route('payments.show', $payment)
            ->with('success', 'Paiement mis à jour avec succès.');
    }

    public function destroy(Payment $payment)
    {
        $payment->delete();
        ActivityLogger::log('Suppression', 'Paiement', $payment->id);

        return redirect()->route('payments.index')
            ->with('success', 'Paiement supprimé avec succès.');
    }
}

================
File: app/Http/Controllers/PermissionController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Permission;
use Illuminate\Http\Request;

class PermissionController extends Controller
{
    public function index()
    {
        $permissions = Permission::all();
        return view('permissions.index', compact('permissions'));
    }
}

================
File: app/Http/Controllers/ProfileController.php
================
<?php

namespace App\Http\Controllers;

use App\Services\ActivityLogger;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;

class ProfileController extends Controller
{
    public function edit()
    {
        return view('profile.edit');
    }

    public function update(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email,' . Auth::id(),
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string',
        ]);

        $user = Auth::user();
        $user->update($request->only(['name', 'email', 'phone', 'address']));

        ActivityLogger::log('Modification', 'User', $user->id);

        return back()->with('success', 'Profil mis à jour avec succès.');
    }

    public function updatePassword(Request $request)
    {
        $request->validate([
            'current_password' => 'required|current_password',
            'password' => 'required|min:8|confirmed',
        ]);

        $user = Auth::user();
        $user->update([
            'password' => Hash::make($request->password),
        ]);

        ActivityLogger::log('Changement de mot de passe', 'User', $user->id);

        return back()->with('success', 'Mot de passe modifié avec succès.');
    }
}

================
File: app/Http/Controllers/ReservationController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Item;
use App\Models\ItemStatus;
use App\Models\Reservation;
use App\Models\User;
use App\Services\ActivityLogger;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ReservationController extends Controller
{
    public function index(Request $request)
    {
        $query = Reservation::with(['user', 'item']);

        if ($request->filled('status')) {
            if ($request->status === 'active') {
                $query->where('is_active', true);
            } elseif ($request->status === 'inactive') {
                $query->where('is_active', false);
            }
        } else {
            // Par défaut, afficher seulement les actives
            $query->where('is_active', true);
        }

        if ($request->filled('user')) {
            $query->where('user_id', $request->user);
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->whereHas('item', function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                    ->orWhere('identifier', 'like', "%{$search}%");
            });
        }

        $reservations = $query->orderBy('priority_order')->paginate(15);
        $users = User::all();

        return view('reservations.index', compact('reservations', 'users'));
    }

    public function create()
    {
        $users = User::whereHas('roles', function($query) {
            $query->whereHas('permissions', function($q) {
                $q->where('slug', 'reserve-item');
            });
        })->get();

        $items = Item::all(); // Tous les objets peuvent être réservés

        return view('reservations.create', compact('users', 'items'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'item_id' => 'required|exists:items,id',
            'reservation_date' => 'required|date',
            'notes' => 'nullable|string',
        ]);

        // Calculer la date d'expiration (12 jours après la réservation)
        $expiryDate = Carbon::parse($request->reservation_date)->addDays(12);

        // Obtenir le dernier ordre de priorité pour cet objet
        $lastPriority = Reservation::where('item_id', $request->item_id)
            ->where('is_active', true)
            ->max('priority_order');

        $reservation = Reservation::create([
            'user_id' => $request->user_id,
            'item_id' => $request->item_id,
            'reservation_date' => $request->reservation_date,
            'expiry_date' => $expiryDate,
            'priority_order' => $lastPriority ? $lastPriority + 1 : 1,
            'is_active' => true,
            'notes' => $request->notes,
            'created_by' => Auth::id(),
        ]);

        // Si c'est la première réservation et que l'objet est disponible, le marquer comme réservé
        if ($lastPriority === null && $reservation->item->status->slug === 'in-stock') {
            $reservedStatus = ItemStatus::where('slug', 'reserved')->first();
            $reservation->item->update(['item_status_id' => $reservedStatus->id]);
        }

        ActivityLogger::log('Création', 'Réservation', $reservation->id);

        return redirect()->route('reservations.index')
            ->with('success', 'Réservation créée avec succès.');
    }

    public function show(Reservation $reservation)
    {
        return view('reservations.show', compact('reservation'));
    }

    public function edit(Reservation $reservation)
    {
        $users = User::whereHas('roles', function($query) {
            $query->whereHas('permissions', function($q) {
                $q->where('slug', 'reserve-item');
            });
        })->get();

        return view('reservations.edit', compact('reservation', 'users'));
    }

    public function update(Request $request, Reservation $reservation)
    {
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'reservation_date' => 'required|date',
            'expiry_date' => 'required|date|after_or_equal:reservation_date',
            'is_active' => 'boolean',
            'notes' => 'nullable|string',
        ]);

        $reservation->update([
            'user_id' => $request->user_id,
            'reservation_date' => $request->reservation_date,
            'expiry_date' => $request->expiry_date,
            'is_active' => $request->is_active ?? false,
            'notes' => $request->notes,
            'updated_by' => Auth::id(),
        ]);

        ActivityLogger::log('Modification', 'Réservation', $reservation->id);

        return redirect()->route('reservations.index')
            ->with('success', 'Réservation mise à jour avec succès.');
    }

    public function reserve(Request $request, Item $item)
    {
        // Vérifier si l'objet est disponible pour la réservation
        if ($item->is_archived) {
            return back()->with('error', 'Cet objet est archivé et ne peut pas être réservé.');
        }

        $request->validate([
            'type' => 'required|in:next,period',
            'start_date' => 'required_if:type,period|date|nullable',
            'end_date' => 'required_if:type,period|date|after_or_equal:start_date|nullable',
        ]);

        $user = auth()->user();

        // Déterminer les dates de réservation
        if ($request->type === 'next') {
            // Réservation dès que l'objet est retourné
            $reservationDate = now();
            $expiryDate = now()->addDays(12);
        } else {
            // Réservation de date à date
            $reservationDate = $request->start_date;
            $expiryDate = $request->end_date;
        }

        // Obtenir le dernier ordre de priorité pour cet objet
        $lastPriority = Reservation::where('item_id', $item->id)
            ->where('is_active', true)
            ->max('priority_order');

        // Créer la réservation
        $reservation = Reservation::create([
            'user_id' => $user->id,
            'item_id' => $item->id,
            'reservation_date' => $reservationDate,
            'expiry_date' => $expiryDate,
            'priority_order' => $lastPriority ? $lastPriority + 1 : 1,
            'is_active' => true,
            'notes' => $request->type === 'next' ? 'Réservation automatique dès retour' : 'Réservation pour période spécifique',
            'created_by' => $user->id,
        ]);

        // Journaliser l'activité
        ActivityLogger::log('create', 'Reservation', $reservation->id);

        return redirect()->route('items.show', $item)
            ->with('success', 'Objet réservé avec succès.');
    }

    public function destroy(Reservation $reservation)
    {
        // Si c'est la première réservation active et que l'objet est réservé
        if ($reservation->priority_order === 1 && $reservation->is_active && $reservation->item->status->slug === 'reserved') {
            // Vérifier s'il y a d'autres réservations actives pour cet objet
            $nextReservation = Reservation::where('item_id', $reservation->item_id)
                ->where('is_active', true)
                ->where('id', '!=', $reservation->id)
                ->orderBy('priority_order')
                ->first();

            if (!$nextReservation) {
                // Si pas d'autres réservations, remettre l'objet en stock
                $inStockStatus = ItemStatus::where('slug', 'in-stock')->first();
                $reservation->item->update(['item_status_id' => $inStockStatus->id]);
            }
        }

        $reservation->delete();
        ActivityLogger::log('Suppression', 'Réservation', $reservation->id);

        // Réorganiser les priorités
        $remainingReservations = Reservation::where('item_id', $reservation->item_id)
            ->where('is_active', true)
            ->orderBy('priority_order')
            ->get();

        $i = 1;
        foreach ($remainingReservations as $res) {
            $res->update(['priority_order' => $i++]);
        }

        return redirect()->route('reservations.index')
            ->with('success', 'Réservation supprimée avec succès.');
    }

    public function reorder(Request $request)
    {
        $request->validate([
            'reservations' => 'required|array',
            'reservations.*.id' => 'required|exists:reservations,id',
            'reservations.*.priority_order' => 'required|integer|min:1',
        ]);

        foreach ($request->reservations as $res) {
            Reservation::where('id', $res['id'])->update([
                'priority_order' => $res['priority_order'],
                'updated_by' => Auth::id(),
            ]);
        }

        ActivityLogger::log('Modification de l\'ordre', 'Réservation');

        return response()->json(['success' => true]);
    }
}

================
File: app/Http/Controllers/RoleController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Permission;
use App\Models\Role;
use App\Services\ActivityLogger;
use Illuminate\Http\Request;
use Illuminate\Support\Str;

class RoleController extends Controller
{
    public function index()
    {
        $roles = Role::withCount('users')->get();
        return view('roles.index', compact('roles'));
    }

    public function create()
    {
        $permissions = Permission::all();
        return view('roles.create', compact('permissions'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255|unique:roles,name',
            'description' => 'nullable|string',
            'requires_validation' => 'boolean',
            'permissions' => 'required|array',
            'permissions.*' => 'exists:permissions,id',
        ]);

        $role = Role::create([
            'name' => $request->name,
            'slug' => Str::slug($request->name),
            'description' => $request->description,
            'requires_validation' => $request->requires_validation ?? false,
        ]);

        $role->permissions()->attach($request->permissions);
        ActivityLogger::log('Création', 'Rôle', $role->id);

        return redirect()->route('roles.index')
            ->with('success', 'Rôle créé avec succès.');
    }

    public function show(Role $role)
    {
        $role->load('permissions', 'users');
        return view('roles.show', compact('role'));
    }

    public function edit(Role $role)
    {
        $permissions = Permission::all();
        return view('roles.edit', compact('role', 'permissions'));
    }

    public function update(Request $request, Role $role)
    {
        $request->validate([
            'name' => 'required|string|max:255|unique:roles,name,' . $role->id,
            'description' => 'nullable|string',
            'requires_validation' => 'boolean',
            'permissions' => 'required|array',
            'permissions.*' => 'exists:permissions,id',
        ]);

        $role->update([
            'name' => $request->name,
            'slug' => Str::slug($request->name),
            'description' => $request->description,
            'requires_validation' => $request->requires_validation ?? false,
        ]);

        $role->permissions()->sync($request->permissions);
        ActivityLogger::log('Modification', 'Rôle', $role->id);

        return redirect()->route('roles.show', $role)
            ->with('success', 'Rôle mis à jour avec succès.');
    }

    public function destroy(Role $role)
    {
        // Vérifier si le rôle a des utilisateurs
        if ($role->users()->count() > 0) {
            return back()->with('error', 'Impossible de supprimer ce rôle car il est attribué à des utilisateurs.');
        }

        $role->permissions()->detach();
        $role->delete();
        ActivityLogger::log('Suppression', 'Rôle', $role->id);

        return redirect()->route('roles.index')
            ->with('success', 'Rôle supprimé avec succès.');
    }

    public function destroyAndReplace(Role $role, Role $replacement)
    {
        // Récupérer tous les utilisateurs de ce rôle
        $users = $role->users;

        // Assigner le rôle de remplacement à ces utilisateurs
        foreach ($users as $user) {
            $user->roles()->detach($role->id);
            if (!$user->roles->contains($replacement->id)) {
                $user->roles()->attach($replacement->id);
            }
        }

        $role->permissions()->detach();
        $role->delete();
        ActivityLogger::log('Suppression avec remplacement', 'Rôle', $role->id, 'Remplacé par le rôle #' . $replacement->id);

        return redirect()->route('roles.index')
            ->with('success', 'Rôle supprimé et utilisateurs transférés avec succès.');
    }
}

================
File: app/Http/Controllers/SearchController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\Item;
use App\Models\User;
use App\Models\Category;
use Illuminate\Http\Request;

class SearchController extends Controller
{
    public function index(Request $request)
    {
        $query = $request->input('q');

        if (empty($query)) {
            return redirect()->back();
        }

        $items = Item::where('name', 'like', "%{$query}%")
            ->orWhere('identifier', 'like', "%{$query}%")
            ->orWhere('description', 'like', "%{$query}%")
            ->where('is_archived', false)
            ->limit(10)
            ->get();

        $categories = Category::where('name', 'like', "%{$query}%")
            ->orWhere('description', 'like', "%{$query}%")
            ->limit(5)
            ->get();

        $users = null;
        if (auth()->user()->hasPermission('view-user-details')) {
            $users = User::where('name', 'like', "%{$query}%")
                ->orWhere('email', 'like', "%{$query}%")
                ->limit(5)
                ->get();
        }

        return view('search.results', compact('query', 'items', 'categories', 'users'));
    }
}

================
File: app/Http/Controllers/UserController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\ActivityLog;
use App\Models\Loan;
use App\Models\Payment;
use App\Models\Reservation;
use App\Models\Role;
use App\Models\User;
use App\Services\ActivityLogger;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class UserController extends Controller
{
    public function index(Request $request)
    {
        $query = User::with('roles');

        if ($request->filled('role')) {
            $query->whereHas('roles', function($q) use ($request) {
                $q->where('roles.id', $request->role);
            });
        }

        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                    ->orWhere('email', 'like', "%{$search}%");
            });
        }

        $users = $query->orderBy('name')->paginate(15);
        $roles = Role::all();

        return view('users.index', compact('users', 'roles'));
    }

    public function create()
    {
        $roles = Role::all();
        return view('users.create', compact('roles'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string',
            'roles' => 'required|array',
            'roles.*' => 'exists:roles,id',
            'is_validated' => 'boolean',
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'phone' => $request->phone,
            'address' => $request->address,
            'is_validated' => $request->is_validated ?? false,
        ]);

        $user->roles()->attach($request->roles);
        ActivityLogger::log('Création', 'Utilisateur', $user->id);

        return redirect()->route('users.index')
            ->with('success', 'Utilisateur créé avec succès.');
    }

    public function show(User $user)
    {
        $user->load('roles', 'loans', 'reservations', 'payments');
        return view('users.show', compact('user'));
    }

    public function edit(User $user)
    {
        $roles = Role::all();
        return view('users.edit', compact('user', 'roles'));
    }

    public function update(Request $request, User $user)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users,email,' . $user->id,
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string',
            'roles' => 'required|array',
            'roles.*' => 'exists:roles,id',
            'is_validated' => 'boolean',
        ]);
        if ($user->name === "Utilisateur système" && $user->email === "system@partageotheque.local") {
            return to_route('users.index')->with('error', 'Vous ne pouvez pas modifier l\'utilisateur système.');
        }

        $user->update([
            'name' => $request->name,
            'email' => $request->email,
            'phone' => $request->phone,
            'address' => $request->address,
            'is_validated' => $request->is_validated ?? false,
        ]);

        $user->roles()->sync($request->roles);
        ActivityLogger::log('Modification', 'Utilisateur', $user->id);

        return redirect()->route('users.show', $user)
            ->with('success', 'Utilisateur mis à jour avec succès.');
    }

    public function destroy(User $user)
    {
        if ($user->id === auth()->id()) {
            return back()->with('error', 'Vous ne pouvez pas supprimer votre propre compte.');
        }
        if ($user->name === "Utilisateur système" && $user->email === "system@partageotheque.local") {
            return back()->with('error', 'Vous ne pouvez pas supprimer l\'utilisateur système.');
        }
        // Vérifier si l'utilisateur a des emprunts actifs
        if ($user->loans()->whereNull('return_date')->count() > 0) {
            return back()->with('error', 'Impossible de supprimer cet utilisateur car il a des emprunts en cours.');
        }

        // Commencer une transaction pour assurer l'intégrité des données

        try {
            DB::beginTransaction();
            // Récupérer les informations de l'utilisateur avant suppression
            $userName = $user->name;
            $userEmail = $user->email;
            $userId = $user->id;

            // Stocker une trace de la suppression (par l'utilisateur courant)
            ActivityLogger::log('Suppression', 'Utilisateur', $userId, "Nom de l'utilisateur supprimé : {$userName} ({$userEmail})");

            // Trouver ou créer un utilisateur "système"
            $systemUser = User::firstOrCreate(
                ['email' => 'system@partageotheque.local'],
                [
                    'name' => 'Utilisateur système',
                    'password' => Hash::make(Str::random(20)),
                    'is_validated' => true
                ]
            );

            // Mettre à jour les journaux d'activité pour les lier à l'utilisateur système
            // en ajoutant une note pour préserver l'information originale
            ActivityLog::where('user_id', $userId)
                ->update([
                    'user_id' => $systemUser->id,
                    'details' => DB::raw("CONCAT(IFNULL(details, ''), ' [Action originale par: {$userName}]')")
                ]);

            // Modifier les journaux où l'utilisateur apparaît comme créateur/modificateur d'autres entités
            Loan::where('created_by', $userId)->update(['created_by' => $systemUser->id]);
            Loan::where('updated_by', $userId)->update(['updated_by' => $systemUser->id]);

            Reservation::where('created_by', $userId)->update(['created_by' => $systemUser->id]);
            Reservation::where('updated_by', $userId)->update(['updated_by' => $systemUser->id]);

            Payment::where('created_by', $userId)->update(['created_by' => $systemUser->id]);
            Payment::where('updated_by', $userId)->update(['updated_by' => $systemUser->id]);

            // Supprimer les relations et l'utilisateur
            $user->roles()->detach();
            $user->delete();

            DB::commit();

            return redirect()->route('users.index')
                ->with('success', 'Utilisateur supprimé avec succès.');
        } catch (\Exception $e) {
            DB::rollback();
            return back()->with('error', 'Une erreur est survenue lors de la suppression de l\'utilisateur: ' . $e->getMessage());
        } catch (\Throwable $e) {
            DB::rollback();
            return back()->with('error', 'Une erreur est survenue lors de la suppression de l\'utilisateur: ' . $e->getMessage());
        }
    }
    public function resetPassword(Request $request, User $user)
    {
        $request->validate([
            'password' => 'required|string|min:8|confirmed',
        ]);

        $user->update([
            'password' => Hash::make($request->password),
        ]);

        ActivityLogger::log('Réinitialisation de mot de passe', 'Utilisateur', $user->id);

        return redirect()->route('users.show', $user)
            ->with('success', 'Mot de passe réinitialisé avec succès.');
    }
}

================
File: app/Http/Controllers/UserValidationController.php
================
<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Services\ActivityLogger;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;
use App\Mail\UserValidated;
use App\Mail\UserRejected;

class UserValidationController extends Controller
{
    public function index()
    {
        $pendingUsers = User::where('is_validated', false)
            ->with('roles')
            ->orderBy('created_at')
            ->get();

        return view('users.validate', compact('pendingUsers'));
    }

    public function validateUser(Request $request, User $user)
    {
        $user->update(['is_validated' => true]);
        ActivityLogger::log('validate', 'User', $user->id);

        // Envoyer email de confirmation
        try {
            Mail::to($user->email)->send(new UserValidated($user));
        } catch (\Exception $e) {
            // Log l'erreur mais continue
        }

        return redirect()->route('users.validate')
            ->with('success', 'Utilisateur validé avec succès.');
    }

    public function reject(Request $request, User $user)
    {
        // Envoyer email de rejet
        try {
            Mail::to($user->email)->send(new UserRejected());
        } catch (\Exception $e) {
            // Log l'erreur mais continue
        }

        $userId = $user->id;
        $user->roles()->detach();
        $user->delete();

        ActivityLogger::log('reject', 'User', $userId);

        return redirect()->route('users.validate')
            ->with('success', 'Utilisateur rejeté et supprimé.');
    }
}

================
File: app/Http/Kernel.php
================
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's middleware aliases.
     *
     * Aliases may be used to conveniently assign middleware to routes and groups.
     *
     * @var array<string, class-string|string>
     */
    protected $middlewareAliases = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed' => \App\Http\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
        'permission' => \App\Http\Middleware\CheckPermission::class,
    ];
}

================
File: app/Http/Middleware/Authenticate.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     */
    protected function redirectTo(Request $request): ?string
    {
        return $request->expectsJson() ? null : route('login');
    }
}

================
File: app/Http/Middleware/CheckPermission.php
================
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class CheckPermission
{
    public function handle(Request $request, Closure $next, $permission)
    {
        if (!Auth::check()) {
            return redirect()->route('login');
        }

        if (!Auth::user()->hasPermission($permission)) {
            abort(403, 'Accès non autorisé.');
        }

        return $next($request);
    }
}

================
File: app/Http/Middleware/EncryptCookies.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;

class EncryptCookies extends Middleware
{
    /**
     * The names of the cookies that should not be encrypted.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

================
File: app/Http/Middleware/PreventRequestsDuringMaintenance.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;

class PreventRequestsDuringMaintenance extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

================
File: app/Http/Middleware/RedirectIfAuthenticated.php
================
<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                if (!Auth::guard($guard)->user()->is_validated) {
                    Auth::guard($guard)->logout();
                    return redirect()->route('login')
                        ->with('error', 'Votre compte est en attente de validation par un administrateur.');
                }

                return redirect(RouteServiceProvider::HOME);
            }
        }

        return $next($request);
    }
}

================
File: app/Http/Middleware/TrimStrings.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;

class TrimStrings extends Middleware
{
    /**
     * The names of the attributes that should not be trimmed.
     *
     * @var array<int, string>
     */
    protected $except = [
        'current_password',
        'password',
        'password_confirmation',
    ];
}

================
File: app/Http/Middleware/TrustHosts.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustHosts as Middleware;

class TrustHosts extends Middleware
{
    /**
     * Get the host patterns that should be trusted.
     *
     * @return array<int, string|null>
     */
    public function hosts(): array
    {
        return [
            $this->allSubdomainsOfApplicationUrl(),
        ];
    }
}

================
File: app/Http/Middleware/TrustProxies.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustProxies as Middleware;
use Illuminate\Http\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array<int, string>|string|null
     */
    protected $proxies;

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers =
        Request::HEADER_X_FORWARDED_FOR |
        Request::HEADER_X_FORWARDED_HOST |
        Request::HEADER_X_FORWARDED_PORT |
        Request::HEADER_X_FORWARDED_PROTO |
        Request::HEADER_X_FORWARDED_AWS_ELB;
}

================
File: app/Http/Middleware/ValidateSignature.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Routing\Middleware\ValidateSignature as Middleware;

class ValidateSignature extends Middleware
{
    /**
     * The names of the query string parameters that should be ignored.
     *
     * @var array<int, string>
     */
    protected $except = [
        // 'fbclid',
        // 'utm_campaign',
        // 'utm_content',
        // 'utm_medium',
        // 'utm_source',
        // 'utm_term',
    ];
}

================
File: app/Http/Middleware/VerifyCsrfToken.php
================
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

================
File: app/Http/Requests/Auth/LoginRequest.php
================
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->input('email')).'|'.$this->ip());
    }
}

================
File: app/Mail/UserRejected.php
================
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class UserRejected extends Mailable
{
    use Queueable, SerializesModels;

    public function build()
    {
        return $this->subject('Demande d\'inscription refusée')
            ->markdown('emails.users.rejected');
    }
}

================
File: app/Mail/UserValidated.php
================
<?php

namespace App\Mail;

use App\Models\User;
use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class UserValidated extends Mailable
{
    use Queueable, SerializesModels;

    public $user;

    public function __construct(User $user)
    {
        $this->user = $user;
    }

    public function build()
    {
        return $this->subject('Votre compte a été validé')
            ->markdown('emails.users.validated');
    }
}

================
File: app/Models/ActivityLog.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ActivityLog extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'action',
        'model_type',
        'model_id',
        'details',
        'ip_address'
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}

================
File: app/Models/Category.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    use HasFactory;

    protected $fillable = ['name', 'slug', 'description'];

    public function items()
    {
        return $this->hasMany(Item::class);
    }
}

================
File: app/Models/Item.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Item extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'identifier',
        'description',
        'category_id',
        'item_status_id',
        'caution_amount',
        'image_path',
        'notes',
        'is_archived'
    ];

    protected $casts = [
        'caution_amount' => 'decimal:2',
        'is_archived' => 'boolean',
    ];

    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function status()
    {
        return $this->belongsTo(ItemStatus::class, 'item_status_id');
    }

    public function loans()
    {
        return $this->hasMany(Loan::class);
    }

    public function activeLoans()
    {
        return $this->hasMany(Loan::class)->whereNull('return_date');
    }

    public function reservations()
    {
        return $this->hasMany(Reservation::class)->where('is_active', true)
            ->orderBy('priority_order');
    }
}

================
File: app/Models/ItemStatus.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ItemStatus extends Model
{
    use HasFactory;

    protected $fillable = ['name', 'slug'];

    public function items()
    {
        return $this->hasMany(Item::class);
    }
}

================
File: app/Models/Loan.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Loan extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'item_id',
        'loan_date',
        'due_date',
        'return_date',
        'notes',
        'created_by',
        'updated_by'
    ];

    protected $casts = [
        'loan_date' => 'date',
        'due_date' => 'date',
        'return_date' => 'date',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function item()
    {
        return $this->belongsTo(Item::class);
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    public function updater()
    {
        return $this->belongsTo(User::class, 'updated_by');
    }
}

================
File: app/Models/Payment.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Payment extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'type',
        'amount',
        'payment_date',
        'expiry_date',
        'notes',
        'created_by',
        'updated_by'
    ];

    protected $casts = [
        'amount' => 'decimal:2',
        'payment_date' => 'date',
        'expiry_date' => 'date',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    public function updater()
    {
        return $this->belongsTo(User::class, 'updated_by');
    }
}

================
File: app/Models/Permission.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Permission extends Model
{
    use HasFactory;

    protected $fillable = ['name', 'slug', 'description'];

    public function roles()
    {
        return $this->belongsToMany(Role::class, 'role_permission');
    }
}

================
File: app/Models/Reservation.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Reservation extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'item_id',
        'reservation_date',
        'expiry_date',
        'priority_order',
        'is_active',
        'notes',
        'created_by',
        'updated_by'
    ];

    protected $casts = [
        'reservation_date' => 'date',
        'expiry_date' => 'date',
        'is_active' => 'boolean',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function item()
    {
        return $this->belongsTo(Item::class);
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    public function updater()
    {
        return $this->belongsTo(User::class, 'updated_by');
    }
}

================
File: app/Models/Role.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Role extends Model
{
    use HasFactory;

    protected $fillable = ['name', 'slug', 'description', 'requires_validation'];

    protected $casts = [
        'requires_validation' => 'boolean',
    ];

    public function permissions()
    {
        return $this->belongsToMany(Permission::class, 'role_permission');
    }

    public function users()
    {
        return $this->belongsToMany(User::class, 'user_role');
    }
}

================
File: app/Models/RolePermission.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Relations\Pivot;

class RolePermission extends Pivot
{
    protected $table = 'role_permission';
}

================
File: app/Models/User.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'phone',
        'address',
        'is_validated',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'is_validated' => 'boolean',
    ];

    public function roles()
    {
        return $this->belongsToMany(Role::class, 'user_role');
    }

    public function loans()
    {
        return $this->hasMany(Loan::class);
    }

    public function reservations()
    {
        return $this->hasMany(Reservation::class);
    }

    public function payments()
    {
        return $this->hasMany(Payment::class);
    }

    public function activityLogs()
    {
        return $this->hasMany(ActivityLog::class);
    }

    public function hasPermission($permission)
    {
        foreach ($this->roles as $role) {
            if ($role->permissions->contains('slug', $permission)) {
                return true;
            }
        }
        return false;
    }
}

================
File: app/Models/UserRole.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Relations\Pivot;

class UserRole extends Pivot
{
    protected $table = 'user_role';
}

================
File: app/Notifications/LoanDueReminder.php
================
<?php

namespace App\Notifications;

use App\Models\Loan;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class LoanDueReminder extends Notification implements ShouldQueue
{
    use Queueable;

    protected $loan;
    protected $daysRemaining;

    public function __construct(Loan $loan, $daysRemaining)
    {
        $this->loan = $loan;
        $this->daysRemaining = $daysRemaining;
    }

    public function via($notifiable)
    {
        return ['mail'];
    }

    public function toMail($notifiable)
    {
        if ($this->daysRemaining > 0) {
            $subject = "Rappel : Retour de {$this->loan->item->name} dans {$this->daysRemaining} jour(s)";
            $line1 = "Nous vous rappelons que votre emprunt de {$this->loan->item->name} arrive à échéance dans {$this->daysRemaining} jour(s).";
        } else if ($this->daysRemaining == 0) {
            $subject = "Rappel : Retour de {$this->loan->item->name} aujourd'hui";
            $line1 = "Nous vous rappelons que votre emprunt de {$this->loan->item->name} arrive à échéance aujourd'hui.";
        } else {
            $subject = "Rappel : Retour de {$this->loan->item->name} en retard";
            $line1 = "Nous vous rappelons que votre emprunt de {$this->loan->item->name} est en retard de " . abs($this->daysRemaining) . " jour(s).";
        }

        return (new MailMessage)
            ->subject($subject)
            ->greeting("Bonjour {$notifiable->name},")
            ->line($line1)
            ->line("Date d'emprunt : {$this->loan->loan_date->format('d/m/Y')}")
            ->line("Date de retour prévue : {$this->loan->due_date->format('d/m/Y')}")
            ->action('Voir les détails', url('/loans/' . $this->loan->id))
            ->line('Merci de votre attention.');
    }
}

================
File: app/Notifications/ReservationReadyNotification.php
================
<?php

namespace App\Notifications;

use App\Models\Reservation;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class ReservationReadyNotification extends Notification implements ShouldQueue
{
    use Queueable;

    protected $reservation;

    public function __construct(Reservation $reservation)
    {
        $this->reservation = $reservation;
    }

    public function via($notifiable)
    {
        return ['mail'];
    }

    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->subject("Votre réservation de {$this->reservation->item->name} est disponible")
            ->greeting("Bonjour {$notifiable->name},")
            ->line("Bonne nouvelle ! L'objet que vous avez réservé est maintenant disponible.")
            ->line("Item: {$this->reservation->item->name}")
            ->line("Date de réservation: {$this->reservation->reservation_date->format('d/m/Y')}")
            ->line("Date d'expiration: {$this->reservation->expiry_date->format('d/m/Y')}")
            ->action('Voir les détails', url('/reservations/' . $this->reservation->id))
            ->line("Vous avez jusqu'au {$this->reservation->expiry_date->format('d/m/Y')} pour venir chercher l'objet, après quoi la réservation sera annulée.");
    }
}

================
File: app/Providers/AppServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}

================
File: app/Providers/AuthServiceProvider.php
================
<?php

namespace App\Providers;

// use Illuminate\Support\Facades\Gate;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The model to policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
    ];

    /**
     * Register any authentication / authorization services.
     */
    public function boot(): void
    {
        $this->registerPolicies();

        //
    }
}

================
File: app/Providers/BroadcastServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\ServiceProvider;

class BroadcastServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Broadcast::routes();

        require base_path('routes/channels.php');
    }
}

================
File: app/Providers/EventServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        //
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}

================
File: app/Providers/RouteServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to the "home" route for your application.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/dashboard';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        $this->configureRateLimiting();

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }

    /**
     * Configure the rate limiters for the application.
     */
    protected function configureRateLimiting(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });
    }
}

================
File: app/Services/ActivityLogger.php
================
<?php

namespace App\Services;

use App\Models\ActivityLog;
use Illuminate\Support\Facades\Auth;

class ActivityLogger
{
    public static function log($action, $modelType, $modelId = null, $details = null)
    {
        if (!Auth::check()) {
            return;
        }

        return ActivityLog::create([
            'user_id' => Auth::id(),
            'action' => $action,
            'model_type' => $modelType,
            'model_id' => $modelId,
            'details' => $details,
            'ip_address' => request()->ip(),
        ]);
    }
}

================
File: artisan
================
#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any of our classes manually. It's great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);

================
File: bootstrap/app.php
================
<?php

/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
|
| The first thing we will do is create a new Laravel application instance
| which serves as the "glue" for all the components of Laravel, and is
| the IoC container for the system binding all of the various parts.
|
*/

$app = new Illuminate\Foundation\Application(
    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)
);

/*
|--------------------------------------------------------------------------
| Bind Important Interfaces
|--------------------------------------------------------------------------
|
| Next, we need to bind some important interfaces into the container so
| we will be able to resolve them when needed. The kernels serve the
| incoming requests to this application from both the web and CLI.
|
*/

$app->singleton(
    Illuminate\Contracts\Http\Kernel::class,
    App\Http\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Console\Kernel::class,
    App\Console\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Debug\ExceptionHandler::class,
    App\Exceptions\Handler::class
);

/*
|--------------------------------------------------------------------------
| Return The Application
|--------------------------------------------------------------------------
|
| This script returns the application instance. The instance is given to
| the calling script so we can separate the building of the instances
| from the actual running of the application and sending responses.
|
*/

return $app;

================
File: bootstrap/cache/.gitignore
================
*
!.gitignore

================
File: composer.json
================
{
    "name": "laravel/laravel",
    "type": "project",
    "description": "The Laravel Framework.",
    "keywords": ["framework", "laravel"],
    "license": "MIT",
    "require": {
        "php": "^8.1",
        "guzzlehttp/guzzle": "^7.2",
        "laravel/framework": "^10.0",
        "laravel/sanctum": "^3.2",
        "laravel/tinker": "^2.8",
        "laravel/ui": "^4.6"
    },
    "require-dev": {
        "fakerphp/faker": "^1.9.1",
        "laravel/pint": "^1.0",
        "laravel/sail": "^1.18",
        "mockery/mockery": "^1.4.4",
        "nunomaduro/collision": "^7.0",
        "phpunit/phpunit": "^10.0",
        "spatie/laravel-ignition": "^2.0"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi"
        ]
    },
    "extra": {
        "branch-alias": {
            "dev-master": "10.x-dev"
        },
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}

================
File: config/app.php
================
<?php

use Illuminate\Support\Facades\Facade;

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application. This value is used when the
    | framework needs to place the application's name in a notification or
    | any other location as required by the application or its packages.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | your application so that it is used when running Artisan tasks.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    'asset_url' => env('ASSET_URL', '/'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. We have gone
    | ahead and set this to a sensible default for you out of the box.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by the translation service provider. You are free to set this value
    | to any of the locales which will be supported by the application.
    |
    */

    'locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Application Fallback Locale
    |--------------------------------------------------------------------------
    |
    | The fallback locale determines the locale to use when the current one
    | is not available. You may change the value to correspond to any of
    | the language folders that are provided through your application.
    |
    */

    'fallback_locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Faker Locale
    |--------------------------------------------------------------------------
    |
    | This locale will be used by the Faker PHP library when generating fake
    | data for your database seeds. For example, this will be used to get
    | localized telephone numbers, street address information and more.
    |
    */

    'faker_locale' => 'en_US',

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is used by the Illuminate encrypter service and should be set
    | to a random, 32 character string, otherwise these encrypted strings
    | will not be safe. Please do this before deploying an application!
    |
    */

    'key' => env('APP_KEY'),

    'cipher' => 'AES-256-CBC',

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => 'file',
        // 'store'  => 'redis',
    ],

    /*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    |
    | The service providers listed here will be automatically loaded on the
    | request to your application. Feel free to add your own services to
    | this array to grant expanded functionality to your applications.
    |
    */

    'providers' => [

        /*
         * Laravel Framework Service Providers...
         */
        Illuminate\Auth\AuthServiceProvider::class,
        Illuminate\Broadcasting\BroadcastServiceProvider::class,
        Illuminate\Bus\BusServiceProvider::class,
        Illuminate\Cache\CacheServiceProvider::class,
        Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,
        Illuminate\Cookie\CookieServiceProvider::class,
        Illuminate\Database\DatabaseServiceProvider::class,
        Illuminate\Encryption\EncryptionServiceProvider::class,
        Illuminate\Filesystem\FilesystemServiceProvider::class,
        Illuminate\Foundation\Providers\FoundationServiceProvider::class,
        Illuminate\Hashing\HashServiceProvider::class,
        Illuminate\Mail\MailServiceProvider::class,
        Illuminate\Notifications\NotificationServiceProvider::class,
        Illuminate\Pagination\PaginationServiceProvider::class,
        Illuminate\Pipeline\PipelineServiceProvider::class,
        Illuminate\Queue\QueueServiceProvider::class,
        Illuminate\Redis\RedisServiceProvider::class,
        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,
        Illuminate\Session\SessionServiceProvider::class,
        Illuminate\Translation\TranslationServiceProvider::class,
        Illuminate\Validation\ValidationServiceProvider::class,
        Illuminate\View\ViewServiceProvider::class,

        /*
         * Package Service Providers...
         */

        /*
         * Application Service Providers...
         */
        App\Providers\AppServiceProvider::class,
        App\Providers\AuthServiceProvider::class,
        // App\Providers\BroadcastServiceProvider::class,
        App\Providers\EventServiceProvider::class,
        App\Providers\RouteServiceProvider::class,

    ],

    /*
    |--------------------------------------------------------------------------
    | Class Aliases
    |--------------------------------------------------------------------------
    |
    | This array of class aliases will be registered when this application
    | is started. However, feel free to register as many as you wish as
    | the aliases are "lazy" loaded so they don't hinder performance.
    |
    */

    'aliases' => Facade::defaultAliases()->merge([
        // 'ExampleClass' => App\Example\ExampleClass::class,
    ])->toArray(),

];

================
File: config/auth.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option controls the default authentication "guard" and password
    | reset options for your application. You may change these defaults
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => 'web',
        'passwords' => 'users',
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | here which uses session storage and the Eloquent user provider.
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | If you have multiple user tables or models you may configure multiple
    | sources which represent each model / table. These sources may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\User::class,
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | You may specify multiple password reset configurations if you have more
    | than one user table or model in the application and you want to have
    | separate password reset settings based on the specific user types.
    |
    | The expire time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => 'password_reset_tokens',
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | times out and the user is prompted to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => 10800,

];

================
File: config/broadcasting.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Broadcaster
    |--------------------------------------------------------------------------
    |
    | This option controls the default broadcaster that will be used by the
    | framework when an event needs to be broadcast. You may set this to
    | any of the connections defined in the "connections" array below.
    |
    | Supported: "pusher", "ably", "redis", "log", "null"
    |
    */

    'default' => env('BROADCAST_DRIVER', 'null'),

    /*
    |--------------------------------------------------------------------------
    | Broadcast Connections
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the broadcast connections that will be used
    | to broadcast events to other systems or over websockets. Samples of
    | each available type of connection are provided inside this array.
    |
    */

    'connections' => [

        'pusher' => [
            'driver' => 'pusher',
            'key' => env('PUSHER_APP_KEY'),
            'secret' => env('PUSHER_APP_SECRET'),
            'app_id' => env('PUSHER_APP_ID'),
            'options' => [
                'host' => env('PUSHER_HOST') ?: 'api-'.env('PUSHER_APP_CLUSTER', 'mt1').'.pusher.com',
                'port' => env('PUSHER_PORT', 443),
                'scheme' => env('PUSHER_SCHEME', 'https'),
                'encrypted' => true,
                'useTLS' => env('PUSHER_SCHEME', 'https') === 'https',
            ],
            'client_options' => [
                // Guzzle client options: https://docs.guzzlephp.org/en/stable/request-options.html
            ],
        ],

        'ably' => [
            'driver' => 'ably',
            'key' => env('ABLY_KEY'),
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
        ],

        'log' => [
            'driver' => 'log',
        ],

        'null' => [
            'driver' => 'null',
        ],

    ],

];

================
File: config/cache.php
================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache connection that gets used while
    | using this caching library. This connection is used when another is
    | not explicitly specified when executing a given caching function.
    |
    */

    'default' => env('CACHE_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "apc", "array", "database", "file",
    |         "memcached", "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'apc' => [
            'driver' => 'apc',
        ],

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'cache',
            'connection' => null,
            'lock_connection' => null,
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'cache',
            'lock_connection' => 'default',
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, or DynamoDB cache
    | stores there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];

================
File: config/cors.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Cross-Origin Resource Sharing (CORS) Configuration
    |--------------------------------------------------------------------------
    |
    | Here you may configure your settings for cross-origin resource sharing
    | or "CORS". This determines what cross-origin operations may execute
    | in web browsers. You are free to adjust these settings as needed.
    |
    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    |
    */

    'paths' => ['api/*', 'sanctum/csrf-cookie'],

    'allowed_methods' => ['*'],

    'allowed_origins' => ['*'],

    'allowed_origins_patterns' => [],

    'allowed_headers' => ['*'],

    'exposed_headers' => [],

    'max_age' => 0,

    'supports_credentials' => false,

];

================
File: config/database.php
================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];

================
File: config/filesystems.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application. Just store away!
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Here you may configure as many filesystem "disks" as you wish, and you
    | may even configure multiple disks of the same driver. Defaults have
    | been set up for each driver as an example of the required values.
    |
    | Supported Drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app'),
            'throw' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];

================
File: config/hashing.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Hash Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default hash driver that will be used to hash
    | passwords for your application. By default, the bcrypt algorithm is
    | used; however, you remain free to modify this option if you wish.
    |
    | Supported: "bcrypt", "argon", "argon2id"
    |
    */

    'driver' => 'bcrypt',

    /*
    |--------------------------------------------------------------------------
    | Bcrypt Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Bcrypt algorithm. This will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'bcrypt' => [
        'rounds' => env('BCRYPT_ROUNDS', 10),
    ],

    /*
    |--------------------------------------------------------------------------
    | Argon Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Argon algorithm. These will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'argon' => [
        'memory' => 65536,
        'threads' => 1,
        'time' => 4,
    ],

];

================
File: config/logging.php
================
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that gets used when writing
    | messages to the logs. The name specified in this option should match
    | one of the channels defined in the "channels" configuration array.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => false,
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Out of
    | the box, Laravel uses the Monolog PHP logging library. This gives
    | you a variety of powerful log handlers / formatters to utilize.
    |
    | Available Drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog",
    |                    "custom", "stack"
    |
    */

    'channels' => [
        'stack' => [
            'driver' => 'stack',
            'channels' => ['single'],
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => 14,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => 'Laravel Log',
            'emoji' => ':boom:',
            'level' => env('LOG_LEVEL', 'critical'),
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],
    ],

];

================
File: config/mail.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send any email
    | messages sent by your application. Alternative mailers may be setup
    | and used as needed; however, this mailer will be used by default.
    |
    */

    'default' => env('MAIL_MAILER', 'smtp'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers to be used while
    | sending an e-mail. You will specify which one you are using for your
    | mailers below. You are free to add additional mailers as required.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses",
    |            "postmark", "log", "array", "failover"
    |
    */

    'mailers' => [
        'smtp' => [
            'transport' => 'smtp',
            'host' => env('MAIL_HOST', 'smtp.mailgun.org'),
            'port' => env('MAIL_PORT', 587),
            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN'),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'mailgun' => [
            'transport' => 'mailgun',
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all e-mails sent by your application to be sent from
    | the same address. Here, you may specify a name and address that is
    | used globally for all e-mails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Markdown Mail Settings
    |--------------------------------------------------------------------------
    |
    | If you are using Markdown based email rendering, you may configure your
    | theme and component paths here, allowing you to customize the design
    | of the emails. Or, you may simply stick with the Laravel defaults!
    |
    */

    'markdown' => [
        'theme' => 'default',

        'paths' => [
            resource_path('views/vendor/mail'),
        ],
    ],

];

================
File: config/queue.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue API supports an assortment of back-ends via a single
    | API, giving you convenient access to each back-end using the same
    | syntax for every one. Here you may define a default connection.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'sync'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection information for each server that
    | is used by your application. A default configuration has been added
    | for each back-end shipped with Laravel. You are free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'jobs',
            'queue' => 'default',
            'retry_after' => 90,
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => 'localhost',
            'queue' => 'default',
            'retry_after' => 90,
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => 90,
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control which database and table are used to store the jobs that
    | have failed. You may change them to any database / table you wish.
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'failed_jobs',
    ],

];

================
File: config/sanctum.php
================
<?php

use Laravel\Sanctum\Sanctum;

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from the following domains / hosts will receive stateful API
    | authentication cookies. Typically, these should include your local
    | and production domains which access your API via a frontend SPA.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort()
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | This array contains the authentication guards that will be checked when
    | Sanctum is trying to authenticate a request. If none of these guards
    | are able to authenticate the request, Sanctum will use the bearer
    | token that's present on an incoming request for authentication.
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    |
    | This value controls the number of minutes until an issued token will be
    | considered expired. If this value is null, personal access tokens do
    | not expire. This won't tweak the lifetime of first-party sessions.
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | When authenticating your first-party SPA with Sanctum you may need to
    | customize some of the middleware Sanctum uses while processing the
    | request. You may change the middleware listed below as required.
    |
    */

    'middleware' => [
        'verify_csrf_token' => App\Http\Middleware\VerifyCsrfToken::class,
        'encrypt_cookies' => App\Http\Middleware\EncryptCookies::class,
    ],

];

================
File: config/services.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'mailgun' => [
        'domain' => env('MAILGUN_DOMAIN'),
        'secret' => env('MAILGUN_SECRET'),
        'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),
        'scheme' => 'https',
    ],

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

];

================
File: config/session.php
================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default session "driver" that will be used on
    | requests. By default, we will use the lightweight native driver but
    | you may specify any of the other wonderful drivers provided here.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to immediately expire on the browser closing, set that option.
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it is stored. All encryption will be run
    | automatically by Laravel and you can use the Session like normal.
    |
    */

    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When using the native session driver, we need a location where session
    | files may be stored. A default has been set for you but a different
    | location may be specified. This is only needed for file sessions.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table we
    | should use to manage the sessions. Of course, a sensible default is
    | provided for you; however, you are free to change this as needed.
    |
    */

    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | While using one of the framework's cache driven session backends you may
    | list a cache store that should be used for these sessions. This value
    | must match with one of the application's configured cache "stores".
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the cookie used to identify a session
    | instance by ID. The name specified here will get used every time a
    | new session cookie is created by the framework for every driver.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application but you are free to change this when necessary.
    |
    */

    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | Here you may change the domain of the cookie used to identify a session
    | in your application. This will determine which domains the cookie is
    | available to in your application. A sensible default has been set.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. You are free to modify this option if needed.
    |
    */

    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" since this is a secure default value.
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => 'lax',

];

================
File: config/view.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | View Storage Paths
    |--------------------------------------------------------------------------
    |
    | Most templating systems load templates from disk. Here you may specify
    | an array of paths that should be checked for your views. Of course
    | the usual Laravel view path has already been registered for you.
    |
    */

    'paths' => [
        resource_path('views'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Compiled View Path
    |--------------------------------------------------------------------------
    |
    | This option determines where all the compiled Blade templates will be
    | stored for your application. Typically, this is within the storage
    | directory. However, as usual, you are free to change this value.
    |
    */

    'compiled' => env(
        'VIEW_COMPILED_PATH',
        realpath(storage_path('framework/views'))
    ),

];

================
File: database/.gitignore
================
*.sqlite*

================
File: database/factories/ItemFactory.php
================
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Model>
 */
class ItemFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * Fields :
     * 'name',
     * 'identifier',
     * 'description',
     * 'category_id',
     * 'item_status_id',
     * 'caution_amount',
     * 'notes',
     * 'is_archived'
     * @return array<string, mixed>
     */
    public function definition(): array
    {

        $category = \App\Models\Category::all()->random();
        $status = \App\Models\ItemStatus::all()->random();

        return [
            'name' => $this->faker->word(),
            'identifier' => $category->slug . '-' . $this->faker->randomNumber(8),
            'description' => $this->faker->text,
            'category_id' => $category->id,
            'item_status_id' => $status->id,
            'caution_amount' => $this->faker->randomNumber(2),
            'notes' => $this->faker->text,
            'is_archived' => $this->faker->boolean,
        ];
    }
}

================
File: database/factories/UserFactory.php
================
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     *
     * @return $this
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}

================
File: database/factories/UsersFactory.php
================
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Model>
 */
class UsersFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    //Create a factory for users. The factory will create a user and then assign a random role to the user.
    public function definition()
    {
        return [
            'name' => $this->faker->name,
            'email' => $this->faker->unique()->safeEmail,
            'phone' => $this->faker->phoneNumber,
            'address' => $this->faker->address,
            'is_validated' => $this->faker->boolean,
            'password' => Hash::make('password'),
        ];
    }

    //Assign a random role to the user
    public function configure()
    {
        return $this->afterCreating(function (\App\Models\User $user) {
            $user->roles()->attach(\App\Models\Role::all()->random());
        });
    }
}

================
File: database/migrations/2014_10_12_000000_create_users_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('phone')->nullable();
            $table->text('address')->nullable();
            $table->boolean('is_validated')->default(false);
            $table->rememberToken();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('users');
    }
};

================
File: database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('password_reset_tokens');
    }
};

================
File: database/migrations/2019_08_19_000000_create_failed_jobs_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('failed_jobs');
    }
};

================
File: database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};

================
File: database/migrations/2025_03_07_185442_create_roles_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('roles', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->boolean('requires_validation')->default(false);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('roles');
    }
};

================
File: database/migrations/2025_03_07_185443_create_permissions_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('permissions', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('permissions');
    }
};

================
File: database/migrations/2025_03_07_185444_create_role_permissions_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('role_permission', function (Blueprint $table) {
            $table->id();
            $table->foreignId('role_id')->constrained()->onDelete('cascade');
            $table->foreignId('permission_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('role_permission');
    }
};

================
File: database/migrations/2025_03_07_185457_create_categories_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('categories');
    }
};

================
File: database/migrations/2025_03_07_185457_create_user_roles_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('user_role', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('role_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('user_role');
    }
};

================
File: database/migrations/2025_03_07_185458_create_item_statuses_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('item_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->unique();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('item_statuses');
    }
};

================
File: database/migrations/2025_03_07_185458_create_items_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('items', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('identifier')->unique();
            $table->text('description')->nullable();
            $table->foreignId('category_id')->constrained();
            $table->foreignId('item_status_id')->constrained();
            $table->decimal('caution_amount', 10, 2)->default(0);
            $table->string('image_path')->nullable();
            $table->text('notes')->nullable();
            $table->boolean('is_archived')->default(false);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('items');
    }
};

================
File: database/migrations/2025_03_07_185459_create_loans_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('loans', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->foreignId('item_id')->constrained();
            $table->date('loan_date');
            $table->date('due_date');
            $table->date('return_date')->nullable();
            $table->text('notes')->nullable();
            $table->foreignId('created_by')->constrained('users');
            $table->foreignId('updated_by')->nullable()->constrained('users');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('loans');
    }
};

================
File: database/migrations/2025_03_07_185500_create_payments_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('payments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->enum('type', ['membership', 'caution', 'donation']);
            $table->decimal('amount', 10, 2);
            $table->date('payment_date');
            $table->date('expiry_date')->nullable();
            $table->text('notes')->nullable();
            $table->foreignId('created_by')->constrained('users');
            $table->foreignId('updated_by')->nullable()->constrained('users');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('payments');
    }
};

================
File: database/migrations/2025_03_07_185500_create_reservations_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('reservations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->foreignId('item_id')->constrained();
            $table->date('reservation_date');
            $table->date('expiry_date');
            $table->integer('priority_order')->default(0);
            $table->boolean('is_active')->default(true);
            $table->text('notes')->nullable();
            $table->foreignId('created_by')->constrained('users');
            $table->foreignId('updated_by')->nullable()->constrained('users');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('reservations');
    }
};

================
File: database/migrations/2025_03_07_185502_create_activity_logs_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('activity_logs', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->string('action');
            $table->string('model_type');
            $table->unsignedBigInteger('model_id')->nullable();
            $table->text('details')->nullable();
            $table->ipAddress('ip_address')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('activity_logs');
    }
};

================
File: database/seeders/AdminUserSeeder.php
================
<?php

namespace Database\Seeders;

use App\Models\Role;
use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;

class AdminUserSeeder extends Seeder
{
    public function run()
    {
        $admin = User::create([
            'name' => 'Administrateur',
            'email' => 'admin@partageoteque.org',
            'password' => Hash::make('password'),
            'is_validated' => true,
        ]);

        $adminRole = Role::where('slug', 'administrateur')->first();
        $admin->roles()->attach($adminRole->id);
    }
}

================
File: database/seeders/CategoriesSeeder.php
================
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class CategoriesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $categories = [
            ['name' => 'Jardinage', 'slug' => 'gardening'],
            ['name' => 'Bricolage', 'slug' => 'diy'],
            ['name' => 'Cuisine', 'slug' => 'cooking'],
            ['name' => 'Décoration', 'slug' => 'decoration'],
            ['name' => 'Électronique', 'slug' => 'electronics'],
            ['name' => 'Informatique', 'slug' => 'computers'],
            ['name' => 'Jeux', 'slug' => 'games'],
            ['name' => 'Sport', 'slug' => 'sports'],
            ['name' => 'Loisirs créatifs', 'slug' => 'crafts'],
            ['name' => 'Vêtements', 'slug' => 'clothing'],
            ['name' => 'Accessoires', 'slug' => 'accessories'],
            ];

        foreach ($categories as $category) {
            \App\Models\Category::create($category);
        }
    }
}

================
File: database/seeders/DatabaseSeeder.php
================
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    public function run()
    {
        $this->call([
            PermissionsSeeder::class,
            RolesSeeder::class,
            ItemStatusSeeder::class,
            AdminUserSeeder::class,
            CategoriesSeeder::class,
        ]);
    }
}

================
File: database/seeders/ItemStatusSeeder.php
================
<?php

namespace Database\Seeders;

use App\Models\ItemStatus;
use Illuminate\Database\Seeder;

class ItemStatusSeeder extends Seeder
{
    public function run()
    {
        $statuses = [
            ['name' => 'En stock', 'slug' => 'in-stock'],
            ['name' => 'Prêté', 'slug' => 'on-loan'],
            ['name' => 'Réservé', 'slug' => 'reserved'],
            ['name' => 'En réparation', 'slug' => 'in-repair'],
            ['name' => 'Indisponible temporairement', 'slug' => 'temporarily-unavailable'],
        ];

        foreach ($statuses as $status) {
            ItemStatus::create($status);
        }
    }
}

================
File: database/seeders/PermissionsSeeder.php
================
<?php

namespace Database\Seeders;

use App\Models\Permission;
use Illuminate\Database\Seeder;

class PermissionsSeeder extends Seeder
{
    public function run()
    {
        $permissions = [
            ['name' => 'Réserver un objet pour soi-même', 'slug' => 'reserve-item'],
            ['name' => 'Consulter le catalogue des objets', 'slug' => 'view-catalog'],
            ['name' => 'Voir les détails d\'un objet', 'slug' => 'view-item-details'],
            ['name' => 'Voir les détails et l\'historique d\'un objet', 'slug' => 'view-item-history'],
            ['name' => 'Modifier un objet existant', 'slug' => 'edit-item'],
            ['name' => 'Créer un nouvel objet', 'slug' => 'create-item'],
            ['name' => 'Supprimer un objet existant', 'slug' => 'delete-item'],
            ['name' => 'Déclarer un emprunt', 'slug' => 'create-loan'],
            ['name' => 'Déclarer un retour', 'slug' => 'return-loan'],
            ['name' => 'Modifier les informations d\'un emprunt existant', 'slug' => 'edit-loan'],
            ['name' => 'Supprimer un emprunt ou un retour de l\'historique', 'slug' => 'delete-loan'],
            ['name' => 'Prolonger un emprunt', 'slug' => 'extend-loan'],
            ['name' => 'Déclarer une réservation', 'slug' => 'create-reservation'],
            ['name' => 'Modifier une réservation existante', 'slug' => 'edit-reservation'],
            ['name' => 'Réorganiser la file d\'attente pour un objet', 'slug' => 'reorganize-queue'],
            ['name' => 'Supprimer une réservation', 'slug' => 'delete-reservation'],
            ['name' => 'Envoyer manuellement une notification à un utilisateur', 'slug' => 'send-notification'],
            ['name' => 'Enregistrer un paiement', 'slug' => 'create-payment'],
            ['name' => 'Modifier un paiement existant', 'slug' => 'edit-payment'],
            ['name' => 'Supprimer un paiement de l\'historique', 'slug' => 'delete-payment'],
            ['name' => 'Modifier les paramètres de l\'application', 'slug' => 'edit-settings'],
            ['name' => 'Consulter le journal d\'activité de tous', 'slug' => 'view-all-activity-logs'],
            ['name' => 'Consulter son propre journal d\'activité', 'slug' => 'view-own-activity-logs'],
            ['name' => 'Créer un compte', 'slug' => 'create-user'],
            ['name' => 'Modifier les informations d\'un compte', 'slug' => 'edit-user'],
            ['name' => 'Supprimer un compte', 'slug' => 'delete-user'],
            ['name' => 'Réinitialiser le mot de passe d\'un compte', 'slug' => 'reset-user-password'],
            ['name' => 'Assigner un ou plusieurs rôles à un compte', 'slug' => 'assign-roles'],
            ['name' => 'Créer des rôles', 'slug' => 'create-role'],
            ['name' => 'Modifier les permissions d\'un rôle', 'slug' => 'edit-role-permissions'],
            ['name' => 'Supprimer un rôle', 'slug' => 'delete-role'],
            ['name' => 'Supprimer un rôle et choisir un rôle de remplacement', 'slug' => 'delete-role-with-replacement'],
            ['name' => 'Voir les objets archivés', 'slug'=>'view-archived-items']
        ];

        foreach ($permissions as $permission) {
            Permission::create($permission);
        }
    }
}

================
File: database/seeders/RolesSeeder.php
================
<?php

namespace Database\Seeders;

use App\Models\Permission;
use App\Models\Role;
use Illuminate\Database\Seeder;

class RolesSeeder extends Seeder
{
    public function run()
    {
        // Création du rôle Adhérent
        $memberRole = Role::create([
            'name' => 'Adhérent',
            'slug' => 'adherent',
            'description' => 'Membre de l\'association pouvant emprunter du matériel',
            'requires_validation' => true,
        ]);

        // Création du rôle Bénévole
        $volunteerRole = Role::create([
            'name' => 'Bénévole',
            'slug' => 'benevole',
            'description' => 'Membre actif gérant les emprunts/retours au quotidien',
            'requires_validation' => false,
        ]);

        // Création du rôle Administrateur
        $adminRole = Role::create([
            'name' => 'Administrateur',
            'slug' => 'administrateur',
            'description' => 'Accès complet pour la gestion globale',
            'requires_validation' => false,
        ]);

        // Attribution des permissions
        $memberPermissions = [
            'view-catalog',
            'view-item-details',
            'reserve-item',
        ];

        $volunteerPermissions = [
            'view-catalog',
            'view-item-details',
            'view-item-history',
            'edit-item',
            'create-item',
            'create-loan',
            'return-loan',
            'extend-loan',
            'create-reservation',
            'edit-reservation',
            'reorganize-queue',
            'delete-reservation',
            'send-notification',
            'view-own-activity-logs',
            'create-user',
            'view-archived-items',
        ];

        // L'administrateur a toutes les permissions
        $adminPermissions = Permission::pluck('slug')->toArray();

        // Attribution des permissions aux rôles
        $memberRole->permissions()->attach(Permission::whereIn('slug', $memberPermissions)->pluck('id'));
        $volunteerRole->permissions()->attach(Permission::whereIn('slug', $volunteerPermissions)->pluck('id'));
        $adminRole->permissions()->attach(Permission::pluck('id'));
    }
}

================
File: package.json
================
{
    "private": true,
    "scripts": {
        "dev": "vite",
        "build": "vite build"
    },
    "devDependencies": {
        "autoprefixer": "^10.4.14",
        "axios": "^1.1.2",
        "laravel-vite-plugin": "^0.7.2",
        "postcss": "^8.4.27",
        "tailwindcss": "^3.3.3",
        "vite": "^4.0.0"
    },
    "dependencies": {
        "chart.js": "^4.4.8"
    }
}

================
File: phpunit.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="./vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory suffix="Test.php">./tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory suffix="Test.php">./tests/Feature</directory>
        </testsuite>
    </testsuites>
    <coverage>
        <include>
            <directory suffix=".php">./app</directory>
        </include>
    </coverage>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_DRIVER" value="array"/>
        <!-- <env name="DB_CONNECTION" value="sqlite"/> -->
        <!-- <env name="DB_DATABASE" value=":memory:"/> -->
        <env name="MAIL_MAILER" value="array"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/.htaccess
================
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>

================
File: public/index.php
================
<?php

use Illuminate\Contracts\Http\Kernel;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Check If The Application Is Under Maintenance
|--------------------------------------------------------------------------
|
| If the application is in maintenance / demo mode via the "down" command
| we will load this file so that any pre-rendered content can be shown
| instead of starting the framework, which could cause an exception.
|
*/

if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader for
| this application. We just need to utilize it! We'll simply require it
| into the script here so we don't need to manually load our classes.
|
*/

require __DIR__.'/../vendor/autoload.php';

/*
|--------------------------------------------------------------------------
| Run The Application
|--------------------------------------------------------------------------
|
| Once we have the application, we can handle the incoming request using
| the application's HTTP kernel. Then, we will send the response back
| to this client's browser, allowing them to enjoy our application.
|
*/

$app = require_once __DIR__.'/../bootstrap/app.php';

$kernel = $app->make(Kernel::class);

$response = $kernel->handle(
    $request = Request::capture()
)->send();

$kernel->terminate($request, $response);

================
File: public/robots.txt
================
User-agent: *
Disallow:

================
File: README.md
================
<p align="center"><a href="https://laravel.com" target="_blank"><img src="https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg" width="400" alt="Laravel Logo"></a></p>

<p align="center">
<a href="https://github.com/laravel/framework/actions"><img src="https://github.com/laravel/framework/workflows/tests/badge.svg" alt="Build Status"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/dt/laravel/framework" alt="Total Downloads"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/v/laravel/framework" alt="Latest Stable Version"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/l/laravel/framework" alt="License"></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

You may also try the [Laravel Bootcamp](https://bootcamp.laravel.com), where you will be guided through building a modern Laravel application from scratch.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 2000 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[OP.GG](https://op.gg)**
- **[WebReinvent](https://webreinvent.com/?utm_source=laravel&utm_medium=github&utm_campaign=patreon-sponsors)**
- **[Lendio](https://lendio.com)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).

================
File: resources/css/app.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;


/* Styles personnalisés pour améliorer le contraste */
.bg-primary-700 {
    background-color: #1d4ed8 !important;
}

.text-white {
    color: #f4f4f4 !important;
}

/* Amélioration des tableaux */
table {
    width: 100%;
    border-collapse: collapse;
}

th {
    background-color: #f3f4f6;
    color: #111827;
    font-weight: 600;
}

td, th {
    padding: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
}

/* Amélioration des formulaires */
select, input, textarea {
    border: 1px solid #d1d5db !important;
    background-color: #ffffff !important;
    color: #111827 !important;
    padding: 0.4rem;
}

/* Amélioration des boutons */
.btn, button[type="submit"] {
    color: #ffffff;
}

================
File: resources/js/app.js
================
import './bootstrap';

// Autocompletion component
window.setupAutocomplete = function(inputId, optionsUrl, valueField = 'id', displayField = 'name') {
    return {
        search: '',
        results: [],
        selectedId: '',
        selectedLabel: '',
        showResults: false,
        isLoading: false,
        valueField: valueField,
        displayField: displayField,

        init() {
            this.$watch('search', (value) => {
                if (value.length > 1) {
                    this.getResults();
                } else {
                    this.results = [];
                }
            });

            // Si une valeur est déjà sélectionnée, récupérer son label
            if (this.selectedId) {
                this.getSelectedLabel();
            }
        },

        getResults() {
            this.isLoading = true;

            fetch(`${optionsUrl}?q=${encodeURIComponent(this.search)}`)
                .then(response => response.json())
                .then(data => {
                    this.results = data;
                    this.isLoading = false;
                    this.showResults = true;
                })
                .catch(error => {
                    console.error('Erreur lors de la recherche:', error);
                    this.isLoading = false;
                });
        },

        selectOption(option) {
            this.selectedId = option[this.valueField];
            this.selectedLabel = option[this.displayField];
            this.search = option[this.displayField];
            this.showResults = false;

            // Mettre à jour le champ caché
            document.getElementById(inputId).value = option[this.valueField];

            // Déclencher un événement pour indiquer qu'une option a été sélectionnée
            this.$dispatch('option-selected', { id: option[this.valueField], value: option[this.displayField] });
        },

        getSelectedLabel() {
            fetch(`${optionsUrl}?id=${encodeURIComponent(this.selectedId)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.length > 0) {
                        this.selectedLabel = data[0][this.displayField];
                        this.search = data[0][this.displayField];
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la récupération du libellé:', error);
                });
        },

        clear() {
            this.search = '';
            this.selectedId = '';
            this.selectedLabel = '';
            document.getElementById(inputId).value = '';
        }
    };
};

================
File: resources/js/bootstrap.js
================
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from 'laravel-echo';

// import Pusher from 'pusher-js';
// window.Pusher = Pusher;

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: import.meta.env.VITE_PUSHER_APP_KEY,
//     cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER ?? 'mt1',
//     wsHost: import.meta.env.VITE_PUSHER_HOST ? import.meta.env.VITE_PUSHER_HOST : `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
//     wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
//     wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
//     forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? 'https') === 'https',
//     enabledTransports: ['ws', 'wss'],
// });

================
File: resources/views/activity-logs/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Journal d\'activité') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <!-- Filtres -->
                <form action="{{ route('activity-logs.index') }}" method="GET" class="mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        @if(auth()->user()->hasPermission('view-all-activity-logs'))
                            <div>
                                <label for="user" class="block text-sm font-medium text-gray-700">Utilisateur</label>
                                <select id="user" name="user" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                    <option value="">Tous les utilisateurs</option>
                                    @foreach($users as $user)
                                        @if($user->name == "Utilisateur système")
                                            <option value="{{ $user->id }}" {{ request('user') == $user->id ? 'selected' : '' }}>
                                                Utilisateur supprimé
                                            </option>
                                        @else
                                            <option value="{{ $user->id }}" {{ request('user') == $user->id ? 'selected' : '' }}>
                                                {{ $user->name }}
                                            </option>
                                        @endif
                                    @endforeach
                                </select>
                            </div>
                        @endif

                        <div>
                            <label for="action" class="block text-sm font-medium text-gray-700">Action</label>
                            <select id="action" name="action" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Toutes les actions</option>
                                @foreach($actions as $action)
                                    <option value="{{ $action }}" {{ request('action') == $action ? 'selected' : '' }}>
                                        {{ $action }}
                                    </option>
                                @endforeach
                            </select>
                        </div>

                        <div>
                            <label for="date_from" class="block text-sm font-medium text-gray-700">Date de début</label>
                            <input type="date" id="date_from" name="date_from" value="{{ request('date_from') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        </div>

                        <div>
                            <label for="date_to" class="block text-sm font-medium text-gray-700">Date de fin</label>
                            <input type="date" id="date_to" name="date_to" value="{{ request('date_to') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        </div>

                        <div class="flex items-end">
                            <button type="submit" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Filtrer</button>
                            @if(request()->hasAny(['user', 'action', 'date_from', 'date_to']))
                                <a href="{{ route('activity-logs.index') }}" class="ml-2 text-gray-600 hover:text-gray-800">Réinitialiser</a>
                            @endif
                        </div>
                    </div>
                </form>

                <!-- Liste des activités -->
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">Date</th>
                            <th class="py-2 px-4 border-b text-left">Utilisateur</th>
                            <th class="py-2 px-4 border-b text-left">Action</th>
                            <th class="py-2 px-4 border-b text-left">Élément</th>
                            <th class="py-2 px-4 border-b text-left">Détails</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($logs as $log)
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $log->created_at->format('d/m/Y H:i') }}</td>
                                @if($log->user->name == "Utilisateur système")
                                    <td class="py-2 px-4 border-b">Utilisateur supprimé</td>
                                @else
                                    <td class="py-2 px-4 border-b">{{ $log->user->name }}</td>
                                @endif
                                    <td class="py-2 px-4 border-b">
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                                            @if(in_array($log->action, ['create', 'store'])) bg-green-100 text-green-800
                                            @elseif(in_array($log->action, ['update', 'edit'])) bg-blue-100 text-blue-800
                                            @elseif(in_array($log->action, ['delete', 'destroy'])) bg-red-100 text-red-800
                                            @else bg-gray-100 text-gray-800 @endif">
                                            {{ $log->action }}
                                        </span>
                                </td>
                                <td class="py-2 px-4 border-b">{{ $log->model_type }}</td>
                                <td class="py-2 px-4 border-b">{{ $log->details }}</td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="5" class="py-4 px-4 border-b text-center text-gray-500">Aucune activité trouvée</td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="mt-4">
                    {{ $logs->links() }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/auth/login.blade.php
================
<x-app-layout>
    <div class="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100">
        <div class="w-full sm:max-w-md mt-6 px-6 py-4 bg-white shadow-md overflow-hidden sm:rounded-lg">
            <h2 class="text-center text-2xl font-bold text-gray-900 mb-4">{{ __('Connexion') }}</h2>

            @if (session('status'))
                <div class="mb-4 font-medium text-sm text-green-600">
                    {{ session('status') }}
                </div>
            @endif

            <form method="POST" action="{{ route('login') }}">
                @csrf

                <!-- Email Address -->
                <div>
                    <label for="email" class="block font-medium text-sm text-gray-700">{{ __('Email') }}</label>
                    <input id="email" class="block mt-1 w-full rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" type="email" name="email" value="{{ old('email') }}" required autofocus />
                    @error('email')
                    <span class="text-red-600 text-sm">{{ $message }}</span>
                    @enderror
                </div>

                <!-- Password -->
                <div class="mt-4">
                    <label for="password" class="block font-medium text-sm text-gray-700">{{ __('Mot de passe') }}</label>
                    <input id="password" class="block mt-1 w-full rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" type="password" name="password" required autocomplete="current-password" />
                    @error('password')
                    <span class="text-red-600 text-sm">{{ $message }}</span>
                    @enderror
                </div>

                <!-- Remember Me -->
                <div class="block mt-4">
                    <label for="remember_me" class="inline-flex items-center">
                        <input id="remember_me" type="checkbox" class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" name="remember">
                        <span class="ml-2 text-sm text-gray-600">{{ __('Se souvenir de moi') }}</span>
                    </label>
                </div>

                <div class="flex items-center justify-between mt-4">
                    @if (Route::has('password.request'))
                        <a class="underline text-sm text-gray-600 hover:text-gray-900" href="{{ route('password.request') }}">
                            {{ __('Mot de passe oublié?') }}
                        </a>
                    @endif

                    <button type="submit" class="ml-3 inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150">
                        {{ __('Connexion') }}
                    </button>
                </div>

                <div class="text-center mt-4">
                    <a href="{{ route('register') }}" class="text-sm text-gray-600 hover:text-gray-900">{{ __('Créer un compte') }}</a>
                </div>
            </form>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/auth/passwords/confirm.blade.php
================
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Confirm Password') }}</div>

                <div class="card-body">
                    {{ __('Please confirm your password before continuing.') }}

                    <form method="POST" action="{{ route('password.confirm') }}">
                        @csrf

                        <div class="row mb-3">
                            <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

                            <div class="col-md-6">
                                <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="current-password">

                                @error('password')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-8 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Confirm Password') }}
                                </button>

                                @if (Route::has('password.request'))
                                    <a class="btn btn-link" href="{{ route('password.request') }}">
                                        {{ __('Forgot Your Password?') }}
                                    </a>
                                @endif
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

================
File: resources/views/auth/passwords/email.blade.php
================
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Reset Password') }}</div>

                <div class="card-body">
                    @if (session('status'))
                        <div class="alert alert-success" role="alert">
                            {{ session('status') }}
                        </div>
                    @endif

                    <form method="POST" action="{{ route('password.email') }}">
                        @csrf

                        <div class="row mb-3">
                            <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus>

                                @error('email')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-6 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Send Password Reset Link') }}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

================
File: resources/views/auth/passwords/reset.blade.php
================
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Reset Password') }}</div>

                <div class="card-body">
                    <form method="POST" action="{{ route('password.update') }}">
                        @csrf

                        <input type="hidden" name="token" value="{{ $token }}">

                        <div class="row mb-3">
                            <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ $email ?? old('email') }}" required autocomplete="email" autofocus>

                                @error('email')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

                            <div class="col-md-6">
                                <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="new-password">

                                @error('password')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password-confirm" class="col-md-4 col-form-label text-md-end">{{ __('Confirm Password') }}</label>

                            <div class="col-md-6">
                                <input id="password-confirm" type="password" class="form-control" name="password_confirmation" required autocomplete="new-password">
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-6 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Reset Password') }}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

================
File: resources/views/auth/register.blade.php
================
<x-app-layout>
    <div class="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100">
        <div class="w-full sm:max-w-md mt-6 px-6 py-4 bg-white shadow-md overflow-hidden sm:rounded-lg">
            <h2 class="text-center text-2xl font-bold text-gray-900 mb-4">{{ __('Inscription') }}</h2>

            <form method="POST" action="{{ route('register') }}">
                @csrf

                <!-- Name -->
                <div>
                    <label for="name" class="block font-medium text-sm text-gray-700">{{ __('Nom') }}</label>
                    <input id="name" class="block mt-1 w-full rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" type="text" name="name" value="{{ old('name') }}" required autofocus />
                    @error('name')
                    <span class="text-red-600 text-sm">{{ $message }}</span>
                    @enderror
                </div>

                <!-- Email Address -->
                <div class="mt-4">
                    <label for="email" class="block font-medium text-sm text-gray-700">{{ __('Email') }}</label>
                    <input id="email" class="block mt-1 w-full rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" type="email" name="email" value="{{ old('email') }}" required />
                    @error('email')
                    <span class="text-red-600 text-sm">{{ $message }}</span>
                    @enderror
                </div>

                <!-- Password -->
                <div class="mt-4">
                    <label for="password" class="block font-medium text-sm text-gray-700">{{ __('Mot de passe') }}</label>
                    <input id="password" class="block mt-1 w-full rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" type="password" name="password" required autocomplete="new-password" />
                    @error('password')
                    <span class="text-red-600 text-sm">{{ $message }}</span>
                    @enderror
                </div>

                <!-- Confirm Password -->
                <div class="mt-4">
                    <label for="password_confirmation" class="block font-medium text-sm text-gray-700">{{ __('Confirmer le mot de passe') }}</label>
                    <input id="password_confirmation" class="block mt-1 w-full rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" type="password" name="password_confirmation" required />
                </div>

                <div class="flex items-center justify-end mt-4">
                    <a class="underline text-sm text-gray-600 hover:text-gray-900" href="{{ route('login') }}">
                        {{ __('Déjà inscrit?') }}
                    </a>

                    <button type="submit" class="ml-4 inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150">
                        {{ __('S\'inscrire') }}
                    </button>
                </div>
            </form>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/auth/verify-email.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Vérification de l\'adresse e-mail') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="mb-4 text-sm text-gray-600">
                        {{ __('Merci pour votre inscription ! Avant de commencer, pourriez-vous vérifier votre adresse e-mail en cliquant sur le lien que nous venons de vous envoyer ? Si vous n\'avez pas reçu l\'e-mail, nous vous en enverrons un autre.') }}
                    </div>

                    @if (session('status') == 'verification-link-sent')
                        <div class="mb-4 font-medium text-sm text-green-600">
                            {{ __('Un nouveau lien de vérification a été envoyé à l\'adresse e-mail que vous avez fournie lors de votre inscription.') }}
                        </div>
                    @endif

                    <div class="mt-4 flex items-center justify-between">
                        <form method="POST" action="{{ route('verification.send') }}">
                            @csrf

                            <div>
                                <x-button>
                                    {{ __('Renvoyer l\'e-mail de vérification') }}
                                </x-button>
                            </div>
                        </form>

                        <form method="POST" action="{{ route('logout') }}">
                            @csrf

                            <button type="submit" class="underline text-sm text-gray-600 hover:text-gray-900">
                                {{ __('Déconnexion') }}
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/auth/verify.blade.php
================
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Verify Your Email Address') }}</div>

                <div class="card-body">
                    @if (session('resent'))
                        <div class="alert alert-success" role="alert">
                            {{ __('A fresh verification link has been sent to your email address.') }}
                        </div>
                    @endif

                    {{ __('Before proceeding, please check your email for a verification link.') }}
                    {{ __('If you did not receive the email') }},
                    <form class="d-inline" method="POST" action="{{ route('verification.resend') }}">
                        @csrf
                        <button type="submit" class="btn btn-link p-0 m-0 align-baseline">{{ __('click here to request another') }}</button>.
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

================
File: resources/views/categories/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Créer une nouvelle catégorie') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('categories.store') }}" method="POST">
                    @csrf

                    <div class="mb-4">
                        <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                        <input type="text" name="name" id="name" value="{{ old('name') }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        @error('name')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mb-4">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea name="description" id="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('description') }}</textarea>
                        @error('description')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="flex items-center justify-end">
                        <a href="{{ route('categories.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Créer
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/categories/edit.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Modifier la catégorie') }}: {{ $category->name }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('categories.update', $category) }}" method="POST">
                    @csrf
                    @method('PUT')

                    <div class="mb-4">
                        <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                        <input type="text" name="name" id="name" value="{{ old('name', $category->name) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        @error('name')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mb-4">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea name="description" id="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('description', $category->description) }}</textarea>
                        @error('description')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="flex items-center justify-end">
                        <a href="{{ route('categories.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Mettre à jour
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/categories/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Gestion des catégories') }}
            </h2>
            @if(auth()->user()->hasPermission('edit-item'))
                <a href="{{ route('categories.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Nouvelle catégorie
                </a>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">Nom</th>
                            <th class="py-2 px-4 border-b text-left">Description</th>
                            <th class="py-2 px-4 border-b text-left">Nombre d'objets</th>
                            <th class="py-2 px-4 border-b text-left">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($categories as $category)
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $category->name }}</td>
                                <td class="py-2 px-4 border-b">{{ Str::limit($category->description, 100) }}</td>
                                <td class="py-2 px-4 border-b">{{ $category->items_count ?? $category->items()->count() }}</td>
                                <td class="py-2 px-4 border-b">
                                    <div class="flex space-x-2">
                                        <a href="{{ route('categories.edit', $category) }}" class="text-indigo-600 hover:text-indigo-900">Modifier</a>

                                        <form action="{{ route('categories.destroy', $category) }}" method="POST" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette catégorie ?');">
                                            @csrf
                                            @method('DELETE')
                                            <button type="submit" class="!text-red-600 hover:text-red-900">Supprimer</button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="4" class="py-4 px-4 border-b text-center text-gray-500">Aucune catégorie trouvée</td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/components/app-layout.blade.php
================
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'La Partageothèque') }}</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <!-- Alpine.js -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.12.0/dist/cdn.min.js"></script>

    <!-- Scripts -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="font-sans antialiased bg-gray-50">
<div class="min-h-screen">
    @auth
        @include('layouts.navigation')
    @else
        <div class="bg-blue-800 shadow">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between h-16 items-center">
                    <div class="flex-shrink-0">
                        <a href="{{ url('/') }}" class="flex items-center">
                            <span class="text-white text-lg font-bold">La Partageothèque</span>
                        </a>
                    </div>
                    <div class="hidden sm:flex sm:items-center sm:ml-6">
                        <a href="{{ route('login') }}" class="text-blue-100 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Se connecter</a>
                        <a href="{{ route('register') }}" class="bg-blue-700 text-white px-3 py-2 rounded-md text-sm font-medium ml-2 hover:bg-blue-600">S'inscrire</a>
                    </div>
                </div>
            </div>
        </div>
    @endauth

    <!-- Page Heading -->
    @if (isset($header))
        <header class="bg-white shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                {{ $header }}
            </div>
        </header>
    @endif

    <!-- Notification area -->
    @if(session('success'))
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4">
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                {{ session('success') }}
            </div>
        </div>
    @endif

    @if(session('error'))
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4">
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                {{ session('error') }}
            </div>
        </div>
    @endif

    <!-- Main Content -->
    <main>
        {{ $slot ?? '' }}
        @yield('content')
    </main>
</div>

@stack('scripts')
</body>
</html>

================
File: resources/views/components/button.blade.php
================
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

================
File: resources/views/components/dropdown-link.blade.php
================
<a {{ $attributes->merge(['class' => 'text-blue-900 block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out text-blue-900']) }}>{{ $slot }}</a>

================
File: resources/views/components/dropdown.blade.php
================
@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])

@php
    switch ($align) {
        case 'left':
            $alignmentClasses = 'ltr:origin-top-left rtl:origin-top-right start-0';
            break;
        case 'top':
            $alignmentClasses = 'origin-top';
            break;
        case 'right':
        default:
            $alignmentClasses = 'ltr:origin-top-right rtl:origin-top-left end-0';
            break;
    }

    switch ($width) {
        case '48':
            $width = 'w-48';
            break;
    }
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open"
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0 scale-95"
         x-transition:enter-end="opacity-100 scale-100"
         x-transition:leave="transition ease-in duration-75"
         x-transition:leave-start="opacity-100 scale-100"
         x-transition:leave-end="opacity-0 scale-95"
         class="absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}"
         style="display: none;"
         @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>

================
File: resources/views/components/nav-link.blade.php
================
@props(['active'])

@php
    $classes = ($active ?? false)
                ? 'inline-flex items-center px-1 pt-1 border-b-2 border-white text-sm font-medium leading-5 text-white focus:outline-none focus:border-white transition duration-150 ease-in-out'
                : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-200 hover:text-white hover:border-gray-300 focus:outline-none focus:text-white focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>

================
File: resources/views/components/responsive-nav-link.blade.php
================
<!-- Créez le fichier resources/views/components/responsive-nav-link.blade.php -->
@props(['active'])

@php
    $classes = ($active ?? false)
                ? 'block pl-3 pr-4 py-2 border-l-4 border-indigo-400 text-base font-medium text-indigo-700 bg-indigo-50 focus:outline-none focus:text-indigo-800 focus:bg-indigo-100 focus:border-indigo-700 transition duration-150 ease-in-out'
                : 'block pl-3 pr-4 py-2 border-l-4 border-transparent text-base font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-50 hover:border-gray-300 focus:outline-none focus:text-gray-800 focus:bg-gray-50 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>

================
File: resources/views/components/table.blade.php
================
<div class="bg-white rounded-lg shadow overflow-hidden">
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
            <tr>
                {{ $header }}
            </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
            {{ $body }}
            </tbody>
        </table>
    </div>
    @if(isset($pagination))
        <div class="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
            {{ $pagination }}
        </div>
    @endif
</div>

================
File: resources/views/components/td.blade.php
================
<td {{ $attributes->merge(['class' => 'px-6 py-4 whitespace-nowrap text-sm text-gray-900']) }}>
    {{ $slot }}
</td>

================
File: resources/views/components/th.blade.php
================
<th {{ $attributes->merge(['class' => 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider']) }}>
    {{ $slot }}
</th>

================
File: resources/views/dashboard/admin.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Tableau de bord') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <!-- Statistiques -->
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Total objets</div>
                    <div class="text-3xl font-bold text-gray-800 mt-2">{{ $stats['total_items'] }}</div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Disponibles</div>
                    <div class="text-3xl font-bold text-green-600 mt-2">{{ $stats['available_items'] }}</div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Empruntés</div>
                    <div class="text-3xl font-bold text-blue-600 mt-2">{{ $stats['items_on_loan'] }}</div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Réservations</div>
                    <div class="text-3xl font-bold text-purple-600 mt-2">{{ $stats['active_reservations'] }}</div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Retours en retard</div>
                    <div class="text-3xl font-bold text-red-600 mt-2">{{ $stats['pending_returns'] }}</div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">En attente validation</div>
                    <div class="text-3xl font-bold text-yellow-600 mt-2">{{ $stats['pending_validations'] }}</div>
                </div>
            </div>

            <!-- Graphiques -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Nouveaux utilisateurs</h3>
                    <div class="h-64">
                        <canvas id="userChart"></canvas>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Nouveaux emprunts</h3>
                    <div class="h-64">
                        <canvas id="loanChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Graphique d'évolution des emprunts actifs -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 mb-8">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Évolution des emprunts actifs (30 derniers jours)</h3>
                <div class="h-64">
                    <canvas id="activeLoanChart"></canvas>
                </div>
            </div>

            <!-- Listes -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Emprunts en retard -->
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Emprunts en retard</h3>

                    @if(count($overdueLoans) > 0)
                        <div class="space-y-3">
                            @foreach($overdueLoans as $loan)
                                <div class="p-3 bg-red-50 border border-red-200 rounded-lg">
                                    <div class="flex justify-between">
                                        <div>
                                            <h4 class="font-medium">{{ $loan->item->name }}</h4>
                                            <p class="text-sm text-gray-500">Emprunté par: {{ $loan->user->name }}</p>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-sm font-medium text-red-700">
                                                En retard de {{ now()->diffInDays($loan->due_date) }} jours
                                            </p>
                                            <p class="text-xs text-gray-500">Date de retour: {{ $loan->due_date->format('d/m/Y') }}</p>
                                        </div>
                                    </div>
                                </div>
                            @endforeach
                        </div>

                        @if(auth()->user()->hasPermission('create-loan'))
                            <div class="mt-4 text-right">
                                <a href="{{ route('loans.index', ['status' => 'active']) }}" class="text-sm text-blue-600 hover:text-blue-800">
                                    Voir tous les emprunts →
                                </a>
                            </div>
                        @endif
                    @else
                        <p class="text-gray-500 italic">Aucun emprunt en retard.</p>
                    @endif
                </div>

                <!-- Prochains retours -->
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Prochains retours</h3>

                    @if(count($upcomingReturns) > 0)
                        <div class="space-y-3">
                            @foreach($upcomingReturns as $loan)
                                <div class="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                                    <div class="flex justify-between">
                                        <div>
                                            <h4 class="font-medium">{{ $loan->item->name }}</h4>
                                            <p class="text-sm text-gray-500">Emprunté par: {{ $loan->user->name }}</p>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-sm font-medium text-blue-700">
                                                @if($loan->due_date->isToday())
                                                    Aujourd'hui
                                                @else
                                                    Dans {{ now()->diffInDays($loan->due_date) }} jours
                                                @endif
                                            </p>
                                            <p class="text-xs text-gray-500">Date de retour: {{ $loan->due_date->format('d/m/Y') }}</p>
                                        </div>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @else
                        <p class="text-gray-500 italic">Aucun retour prévu dans les 7 prochains jours.</p>
                    @endif
                </div>
            </div>
        </div>
    </div>

    @push('scripts')
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            // Configuration des graphiques
            const userCtx = document.getElementById('userChart').getContext('2d');
            const loanCtx = document.getElementById('loanChart').getContext('2d');
            const activeLoanCtx = document.getElementById('activeLoanChart').getContext('2d');

            // Données des graphiques
            const userChartData = {
                labels: @json($userChartData['labels']),
                datasets: [{
                    label: 'Nouveaux utilisateurs',
                    data: @json($userChartData['data']),
                    backgroundColor: 'rgba(59, 130, 246, 0.2)',
                    borderColor: 'rgba(59, 130, 246, 1)',
                    borderWidth: 2,
                    tension: 0.3
                }]
            };

            const loanChartData = {
                labels: @json($loanChartData['labels']),
                datasets: [{
                    label: 'Nouveaux emprunts',
                    data: @json($loanChartData['data']),
                    backgroundColor: 'rgba(16, 185, 129, 0.2)',
                    borderColor: 'rgba(16, 185, 129, 1)',
                    borderWidth: 2,
                    tension: 0.3
                }]
            };

            const activeLoanChartData = {
                labels: @json($activeLoanChartData['labels']),
                datasets: [{
                    label: 'Emprunts actifs',
                    data: @json($activeLoanChartData['data']),
                    backgroundColor: 'rgba(139, 92, 246, 0.2)',
                    borderColor: 'rgba(139, 92, 246, 1)',
                    borderWidth: 2,
                    tension: 0.3,
                    fill: true
                }]
            };

            // Options communes
            const commonOptions = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0
                        }
                    }
                }
            };

            // Création des graphiques
            new Chart(userCtx, {
                type: 'line',
                data: userChartData,
                options: commonOptions
            });

            new Chart(loanCtx, {
                type: 'line',
                data: loanChartData,
                options: commonOptions
            });

            new Chart(activeLoanCtx, {
                type: 'line',
                data: activeLoanChartData,
                options: {
                    ...commonOptions,
                    plugins: {
                        legend: {
                            display: true
                        }
                    }
                }
            });
        </script>
    @endpush
</x-app-layout>

================
File: resources/views/dashboard/member.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Mon espace') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <!-- État de l'adhésion -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 mb-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Votre statut d'adhérent</h3>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <p class="text-sm font-medium text-gray-500">Statut d'adhésion</p>
                        @if($activeMembership)
                            <p class="text-lg font-bold text-green-600">
                                Membre actif
                                @if($activeMembership->expiry_date)
                                    <span class="text-sm font-normal text-gray-500"> jusqu'au {{ $activeMembership->expiry_date->format('d/m/Y') }}</span>
                                @endif
                            </p>
                        @else
                            <p class="text-lg font-bold text-red-600">Cotisation à renouveler</p>
                        @endif
                    </div>

                    <div class="bg-gray-50 p-4 rounded-lg">
                        <p class="text-sm font-medium text-gray-500">Caution versée</p>
                        <p class="text-lg font-bold text-blue-600">{{ number_format($totalCaution, 2) }} €</p>
                    </div>

                    <div class="bg-gray-50 p-4 rounded-lg">
                        <p class="text-sm font-medium text-gray-500">Membre depuis</p>
                        <p class="text-lg font-bold text-gray-800">
                            @if($firstPayment)
                                {{ $firstPayment->payment_date->format('d/m/Y') }}
                            @else
                                -
                            @endif
                        </p>
                    </div>
                </div>
            </div>

            <!-- Statistiques personnelles -->
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Emprunts actifs</div>
                    <div class="text-3xl font-bold text-blue-600 mt-2">{{ $stats['active_loans_count'] }}</div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Réservations</div>
                    <div class="text-3xl font-bold text-purple-600 mt-2">{{ $stats['reservations_count'] }}</div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Total emprunts</div>
                    <div class="text-3xl font-bold text-gray-800 mt-2">{{ $stats['total_loans_count'] }}</div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 text-center">
                    <div class="text-sm font-medium text-gray-500">Retards</div>
                    <div class="text-3xl font-bold {{ $stats['late_returns_count'] > 0 ? 'text-red-600' : 'text-green-600' }} mt-2">
                        {{ $stats['late_returns_count'] }}
                    </div>
                </div>
            </div>

            <!-- Emprunts en cours et réservations -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <!-- Emprunts en cours -->
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Vos emprunts en cours</h3>

                    @if(count($activeLoans) > 0)
                        <div class="space-y-3">
                            @foreach($activeLoans as $loan)
                                <div class="p-3 {{ $loan->due_date < now() ? 'bg-red-50 border-red-200' : 'bg-blue-50 border-blue-200' }} border rounded-lg">
                                    <div class="flex justify-between">
                                        <div>
                                            <h4 class="font-medium">{{ $loan->item->name }}</h4>
                                            <p class="text-xs text-gray-500">Emprunté le {{ $loan->loan_date->format('d/m/Y') }}</p>
                                        </div>
                                        <div class="text-right">
                                            @if($loan->due_date < now())
                                                <p class="text-sm font-medium text-red-700">
                                                    En retard de {{ now()->diffInDays($loan->due_date) }} jours
                                                </p>
                                            @else
                                                <p class="text-sm font-medium text-blue-700">
                                                    À retourner dans {{ now()->diffInDays($loan->due_date) }} jour(s)
                                                </p>
                                            @endif
                                            <p class="text-xs text-gray-500">Date de retour: {{ $loan->due_date->format('d/m/Y') }}</p>
                                        </div>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @else
                        <p class="text-gray-500 italic">Vous n'avez aucun emprunt en cours.</p>
                    @endif
                </div>

                <!-- Réservations -->
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Vos réservations en cours</h3>

                    @if(count($activeReservations) > 0)
                        <div class="space-y-3">
                            @foreach($activeReservations as $reservation)
                                <div class="p-3 bg-purple-50 border border-purple-200 rounded-lg">
                                    <div class="flex justify-between">
                                        <div>
                                            <h4 class="font-medium">{{ $reservation->item->name }}</h4>
                                            <p class="text-xs text-gray-500">Réservé le {{ $reservation->reservation_date->format('d/m/Y') }}</p>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-sm font-medium text-purple-700">
                                                @if($reservation->expiry_date < now())
                                                    Expirée
                                                @else
                                                    Expire le {{ $reservation->expiry_date->format('d/m/Y') }}
                                                @endif
                                            </p>
                                            <p class="text-xs text-gray-500">
                                                Position: {{ $reservation->priority_order }}
                                                @if($reservation->priority_order == 1)
                                                    (prochain à emprunter)
                                                @endif
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @else
                        <p class="text-gray-500 italic">Vous n'avez aucune réservation en cours.</p>
                    @endif
                </div>
            </div>

            <!-- Historique des emprunts -->
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Vos derniers emprunts</h3>

                @if(count($recentLoans) > 0)
                    <div class="overflow-x-auto">
                        <table class="min-w-full bg-white">
                            <thead>
                            <tr>
                                <th class="py-2 px-4 border-b text-left">Objet</th>
                                <th class="py-2 px-4 border-b text-left">Emprunté le</th>
                                <th class="py-2 px-4 border-b text-left">Retourné le</th>
                                <th class="py-2 px-4 border-b text-left">Durée</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach($recentLoans as $loan)
                                <tr>
                                    <td class="py-2 px-4 border-b">{{ $loan->item->name }}</td>
                                    <td class="py-2 px-4 border-b">{{ $loan->loan_date->format('d/m/Y') }}</td>
                                    <td class="py-2 px-4 border-b">{{ $loan->return_date->format('d/m/Y') }}</td>
                                    <td class="py-2 px-4 border-b">{{ $loan->loan_date->diffInDays($loan->return_date) }} jours</td>
                                </tr>
                            @endforeach
                            </tbody>
                        </table>
                    </div>
                @else
                    <p class="text-gray-500 italic">Vous n'avez pas encore d'historique d'emprunts.</p>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/emails/users/rejected.blade.php
================
@component('mail::message')
    # Demande d'inscription refusée

    Bonjour,

    Nous sommes désolés de vous informer que votre demande d'inscription à La Partageothèque n'a pas été acceptée.

    Pour plus d'informations, veuillez nous contacter directement.

    Merci de votre compréhension,<br>
    L'équipe de La Partageothèque
@endcomponent

================
File: resources/views/emails/users/validated.blade.php
================
@component('mail::message')
    # Votre compte a été validé

    Bonjour {{ $user->name }},

    Votre compte sur la plateforme de La Partageothèque a été validé. Vous pouvez dès à présent vous connecter et utiliser nos services.

    @component('mail::button', ['url' => route('login')])
        Se connecter
    @endcomponent

    Merci,<br>
    L'équipe de La Partageothèque
@endcomponent

================
File: resources/views/home.blade.php
================
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Dashboard') }}</div>

                <div class="card-body">
                    @if (session('status'))
                        <div class="alert alert-success" role="alert">
                            {{ session('status') }}
                        </div>
                    @endif

                    {{ __('You are logged in!') }}
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

================
File: resources/views/items/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Ajouter un nouvel objet') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('items.store') }}" method="POST" enctype="multipart/form-data">
                    @csrf

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                            <input type="text" name="name" id="name" value="{{ old('name') }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('name')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="identifier" class="block text-sm font-medium text-gray-700">Identifiant unique</label>
                            <input type="text" name="identifier" id="identifier" value="{{ old('identifier') }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('identifier')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="category_id" class="block text-sm font-medium text-gray-700">Catégorie</label>
                            <select name="category_id" id="category_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Sélectionner une catégorie</option>
                                @foreach($categories as $category)
                                    <option value="{{ $category->id }}" {{ old('category_id') == $category->id ? 'selected' : '' }}>
                                        {{ $category->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('category_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="item_status_id" class="block text-sm font-medium text-gray-700">Statut</label>
                            <select name="item_status_id" id="item_status_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                @foreach($statuses as $status)
                                    <option value="{{ $status->id }}" {{ old('item_status_id') == $status->id || ($status->slug == 'in-stock' && !old('item_status_id')) ? 'selected' : '' }}>
                                        {{ $status->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('item_status_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="caution_amount" class="block text-sm font-medium text-gray-700">Montant de la caution (€)</label>
                            <input type="number" name="caution_amount" id="caution_amount" value="{{ old('caution_amount', 0) }}" step="0.01" min="0" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('caution_amount')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="image" class="block text-sm font-medium text-gray-700">Image</label>
                            <input type="file" name="image" id="image" class="mt-1 block w-full">
                            @error('image')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea name="description" id="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('description') }}</textarea>
                        @error('description')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6">
                        <label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea name="notes" id="notes" rows="2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('notes') }}</textarea>
                        @error('notes')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('items.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Créer l'objet
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/items/edit.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Modifier l\'objet') }} : {{ $item->name }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('items.update', $item) }}" method="POST" enctype="multipart/form-data">
                    @csrf
                    @method('PUT')

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                            <input type="text" name="name" id="name" value="{{ old('name', $item->name) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('name')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="identifier" class="block text-sm font-medium text-gray-700">Identifiant unique</label>
                            <input type="text" name="identifier" id="identifier" value="{{ old('identifier', $item->identifier) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('identifier')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="category_id" class="block text-sm font-medium text-gray-700">Catégorie</label>
                            <select name="category_id" id="category_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                @foreach($categories as $category)
                                    <option value="{{ $category->id }}" {{ old('category_id', $item->category_id) == $category->id ? 'selected' : '' }}>
                                        {{ $category->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('category_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="item_status_id" class="block text-sm font-medium text-gray-700">Statut</label>
                            <select name="item_status_id" id="item_status_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                @foreach($statuses as $status)
                                    <option value="{{ $status->id }}" {{ old('item_status_id', $item->item_status_id) == $status->id ? 'selected' : '' }}>
                                        {{ $status->name }}
                                    </option>
                                @endforeach
                            </select>
                            @error('item_status_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="caution_amount" class="block text-sm font-medium text-gray-700">Montant de la caution (€)</label>
                            <input type="number" name="caution_amount" id="caution_amount" value="{{ old('caution_amount', $item->caution_amount) }}" step="0.01" min="0" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('caution_amount')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="image" class="block text-sm font-medium text-gray-700">Image</label>
                            @if($item->image_path)
                                <div class="mt-1 mb-2">
                                    <img src="{{ Storage::url($item->image_path) }}" alt="{{ $item->name }}" class="h-32 w-auto">
                                </div>
                            @endif
                            <input type="file" name="image" id="image" class="mt-1 block w-full">
                            <p class="text-xs text-gray-500 mt-1">Laissez vide pour conserver l'image actuelle</p>
                            @error('image')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea name="description" id="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('description', $item->description) }}</textarea>
                        @error('description')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6">
                        <label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea name="notes" id="notes" rows="2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('notes', $item->notes) }}</textarea>
                        @error('notes')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('items.show', $item) }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Enregistrer les modifications
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/items/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Catalogue des objets') }}
            </h2>
            @if(auth()->user()->hasPermission('create-item'))
                <a href="{{ route('items.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Nouvel objet
                </a>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <!-- Filtres -->
                <form action="{{ route('items.index') }}" method="GET" class="mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div>
                            <label for="category" class="block text-sm font-medium text-gray-700">Catégorie</label>
                            <select id="category" name="category" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Toutes les catégories</option>
                                @foreach($categories as $category)
                                    <option value="{{ $category->id }}" {{ request('category') == $category->id ? 'selected' : '' }}>
                                        {{ $category->name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>

                        <div>
                            <label for="status" class="block text-sm font-medium text-gray-700">Statut</label>
                            <select id="status" name="status" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Tous les statuts</option>
                                @foreach($statuses as $status)
                                    <option value="{{ $status->id }}" {{ request('status') == $status->id ? 'selected' : '' }}>
                                        {{ $status->name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>
                        <div>
                            <label for="search" class="block text-sm font-medium text-gray-700">Recherche</label>
                            <input type="text" id="search" name="search" value="{{ request('search') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Nom, identifiant ou description">
                        </div>

                        <div class="flex items-end">
                            <button type="submit" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Filtrer</button>
                            @if(request()->hasAny(['category', 'status', 'search']))
                                <a href="{{ route('items.index') }}" class="ml-2 text-gray-600 hover:text-gray-800">Réinitialiser</a>
                            @endif
                        </div>
                    </div>
                </form>
                <!-- Bouton pour afficher les objets archivés -->
                @if(Auth::user()->hasPermission('view-archived-items'))
                <div class="mt-4 mb-6">
                    @if(request('show_archived'))
                        <a href="{{ route('items.index', array_merge(request()->except('show_archived'), [])) }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Voir les objets actifs
                        </a>
                    @else
                        <a href="{{ route('items.index', array_merge(request()->except('show_archived'), ['show_archived' => 1])) }}" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                            Voir les objets archivés
                        </a>
                    @endif
                </div>
                @endif

                <!-- Liste des objets -->
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">ID</th>
                            <th class="py-2 px-4 border-b text-left">Nom</th>
                            <th class="py-2 px-4 border-b text-left">Catégorie</th>
                            <th class="py-2 px-4 border-b text-left">Statut</th>
                            <th class="py-2 px-4 border-b text-left">Caution</th>
                            <th class="py-2 px-4 border-b text-left">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($items as $item)
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $item->identifier }}</td>
                                <td class="py-2 px-4 border-b">{{ $item->name }}</td>
                                <td class="py-2 px-4 border-b">{{ $item->category->name }}</td>
                                <td class="py-2 px-4 border-b">
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                                            @if($item->status->slug == 'in-stock') bg-green-100 text-green-800
                                            @elseif($item->status->slug == 'on-loan') bg-yellow-100 text-yellow-800
                                            @elseif($item->status->slug == 'reserved') bg-blue-100 text-blue-800
                                            @elseif($item->status->slug == 'in-repair') bg-red-100 text-red-800
                                            @else bg-gray-100 text-gray-800 @endif">
                                            {{ $item->status->name }}
                                        </span>
                                </td>
                                <td class="py-2 px-4 border-b">{{ number_format($item->caution_amount, 2) }} €</td>
                                <td class="py-2 px-4 border-b">
                                    <div class="flex space-x-2">
                                        <a href="{{ route('items.show', $item) }}" class="text-blue-600 hover:text-blue-900">Voir</a>

                                        @if(auth()->user()->hasPermission('edit-item'))
                                            <a href="{{ route('items.edit', $item) }}" class="text-indigo-600 hover:text-indigo-900">Modifier</a>
                                        @endif

                                        @if(auth()->user()->hasPermission('delete-item'))
                                            <form action="{{ route('items.destroy', $item) }}" method="POST" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir archiver cet objet ?');">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="!text-red-600 hover:!text-red-900 ">Archiver</button>
                                            </form>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="6" class="py-4 px-4 border-b text-center text-gray-500">Aucun objet trouvé</td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="mt-4">
                    {{ $items->links() }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/items/show.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ $item->name }}
            </h2>
            <div>
                @if(auth()->user()->hasPermission('edit-item'))
                    <a href="{{ route('items.edit', $item) }}"
                       class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
                        Modifier
                    </a>
                @endif
                @if(auth()->user()->hasPermission('create-item'))
                    <form action="{{ route('items.duplicate', $item) }}" method="POST" class="inline">
                        @csrf
                        <button type="submit"
                                class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                            Dupliquer
                        </button>
                    </form>
                @endif
                @if(auth()->user()->hasPermission('delete-item'))
                    <form action="{{ route('items.destroy', $item) }}" method="POST" class="inline"
                          onsubmit="return confirm('Êtes-vous sûr de vouloir archiver cet objet?');">
                        @csrf
                        @method('DELETE')
                        <button type="submit"
                                class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded ml-2">
                            Archiver
                        </button>
                    </form>
                @endif
                <!-- Bouton de réservation pour les utilisateurs simples -->
                @if(auth()->user()->hasPermission('reserve-item') && !auth()->user()->hasPermission('create-reservation'))
                    <div class="mt-4">
                        <button onclick="toggleReservationForm()"
                                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full">
                            Réserver cet objet
                        </button>

                        <div id="reservationForm" class="mt-4 p-4 bg-gray-50 rounded-lg" style="display: none;">
                            <h4 class="font-medium text-gray-900 mb-2">Réserver "{{ $item->name }}"</h4>

                            <form action="{{ route('items.reserve', $item) }}" method="POST">
                                @csrf

                                <div class="mb-4">
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="type" value="next" class="form-radio" checked
                                               onchange="toggleDateFields(false)">
                                        <span class="ml-2">Réserver dès que l'objet est retourné</span>
                                    </label>
                                </div>

                                <div class="mb-4">
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="type" value="period" class="form-radio"
                                               onchange="toggleDateFields(true)">
                                        <span class="ml-2">Réserver pour une période spécifique</span>
                                    </label>
                                </div>

                                <div id="dateFields" class="grid grid-cols-2 gap-4 mb-4" style="display: none;">
                                    <div>
                                        <label for="start_date" class="block text-sm font-medium text-gray-700">Date de
                                            début</label>
                                        <input type="date" name="start_date" id="start_date"
                                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                    </div>

                                    <div>
                                        <label for="end_date" class="block text-sm font-medium text-gray-700">Date de
                                            fin</label>
                                        <input type="date" name="end_date" id="end_date"
                                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                    </div>
                                </div>

                                <div class="flex justify-end">
                                    <button type="button" onclick="toggleReservationForm()"
                                            class="mr-2 text-gray-600 hover:text-gray-900">Annuler
                                    </button>
                                    <button type="submit"
                                            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded">
                                        Confirmer la réservation
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <script>
                        function toggleReservationForm() {
                            const form = document.getElementById('reservationForm');
                            form.style.display = form.style.display === 'none' ? 'block' : 'none';
                        }

                        function toggleDateFields(show) {
                            const dateFields = document.getElementById('dateFields');
                            dateFields.style.display = show ? 'grid' : 'none';
                        }
                    </script>
                @endif
            </div>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <!-- Informations de base -->
                    <div class="md:col-span-2">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Informations</h3>

                        <div class="grid grid-cols-2 gap-4 mb-6">
                            <div>
                                <p class="text-sm font-medium text-gray-500">Identifiant</p>
                                <p class="mt-1 text-gray-900">{{ $item->identifier }}</p>
                            </div>

                            <div>
                                <p class="text-sm font-medium text-gray-500">Statut</p>
                                <p class="mt-1">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                                        @if($item->status->slug == 'in-stock') bg-green-100 text-green-800
                                        @elseif($item->status->slug == 'on-loan') bg-yellow-100 text-yellow-800
                                        @elseif($item->status->slug == 'reserved') bg-blue-100 text-blue-800
                                        @elseif($item->status->slug == 'in-repair') bg-red-100 text-red-800
                                        @else bg-gray-100 text-gray-800 @endif">
                                        {{ $item->status->name }}
                                    </span>
                                </p>
                            </div>

                            <div>
                                <p class="text-sm font-medium text-gray-500">Catégorie</p>
                                <p class="mt-1 text-gray-900">{{ $item->category->name }}</p>
                            </div>

                            <div>
                                <p class="text-sm font-medium text-gray-500">Caution</p>
                                <p class="mt-1 text-gray-900">{{ number_format($item->caution_amount, 2) }} €</p>
                            </div>
                        </div>

                        <div class="mb-6">
                            <p class="text-sm font-medium text-gray-500">Description</p>
                            <div class="mt-1 text-gray-900">
                                {{ $item->description ?? 'Aucune description' }}
                            </div>
                        </div>

                        @if($item->notes)
                            <div class="mb-6">
                                <p class="text-sm font-medium text-gray-500">Notes</p>
                                <div class="mt-1 text-gray-900">
                                    {{ $item->notes }}
                                </div>
                            </div>
                        @endif
                    </div>

                    <!-- Image -->
                    <div>
                        @if($item->image_path)
                            <img src="{{ Storage::url($item->image_path) }}" alt="{{ $item->name }}"
                                 class="w-full rounded-lg shadow-md">
                        @else
                            <div class="bg-gray-200 rounded-lg h-64 flex items-center justify-center">
                                <p class="text-gray-500">Aucune image</p>
                            </div>
                        @endif

                        <!-- Actions -->
                        @if(auth()->user()->hasPermission('create-loan') && $item->status->slug === 'in-stock')
                            <div class="mt-4">
                                <a href="{{ route('loans.create', ['item_id' => $item->id]) }}"
                                   class="block w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded text-center">
                                    Créer un emprunt
                                </a>
                            </div>
                        @endif

                        @if(auth()->user()->hasPermission('create-reservation'))
                            <div class="mt-2">
                                <a href="{{ route('reservations.create', ['item_id' => $item->id]) }}"
                                   class="block w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-center">
                                    Réserver
                                </a>
                            </div>
                        @endif
                    </div>
                </div>

                <!-- Historique -->
                @if(auth()->user()->hasPermission('view-item-history'))
                    <div class="mt-8 border-t pt-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Historique des emprunts</h3>

                        @if(isset($item->loans) && $item->loans->count() > 0)
                            <div class="overflow-x-auto">
                                <table class="min-w-full bg-white">
                                    <thead>
                                    <tr>
                                        <th class="py-2 px-4 border-b text-left">Emprunteur</th>
                                        <th class="py-2 px-4 border-b text-left">Date d'emprunt</th>
                                        <th class="py-2 px-4 border-b text-left">Date de retour prévue</th>
                                        <th class="py-2 px-4 border-b text-left">Date de retour réelle</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach($item->loans as $loan)
                                        <tr>
                                            <td class="py-2 px-4 border-b">{{ $loan->user->name }}</td>
                                            <td class="py-2 px-4 border-b">{{ $loan->loan_date->format('d/m/Y') }}</td>
                                            <td class="py-2 px-4 border-b">{{ $loan->due_date->format('d/m/Y') }}</td>
                                            <td class="py-2 px-4 border-b">
                                                @if($loan->return_date)
                                                    {{ $loan->return_date->format('d/m/Y') }}
                                                @else
                                                    <span class="text-yellow-600">En cours</span>
                                                @endif
                                            </td>
                                        </tr>
                                    @endforeach
                                    </tbody>
                                </table>
                            </div>
                        @else
                            <p class="text-gray-500">Aucun emprunt dans l'historique</p>
                        @endif

                        <!-- Réservations en cours -->
                        <h3 class="text-lg font-medium text-gray-900 my-4">Réservations en cours</h3>

                        @if(isset($item->reservations) && $item->reservations->count() > 0)
                            <div class="overflow-x-auto">
                                <table class="min-w-full bg-white">
                                    <thead>
                                    <tr>
                                        <th class="py-2 px-4 border-b text-left">Priorité</th>
                                        <th class="py-2 px-4 border-b text-left">Demandeur</th>
                                        <th class="py-2 px-4 border-b text-left">Date de réservation</th>
                                        <th class="py-2 px-4 border-b text-left">Expiration</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach($item->reservations as $reservation)
                                        <tr>
                                            <td class="py-2 px-4 border-b">{{ $reservation->priority_order }}</td>
                                            <td class="py-2 px-4 border-b">{{ $reservation->user->name }}</td>
                                            <td class="py-2 px-4 border-b">{{ $reservation->reservation_date->format('d/m/Y') }}</td>
                                            <td class="py-2 px-4 border-b">{{ $reservation->expiry_date->format('d/m/Y') }}</td>
                                        </tr>
                                    @endforeach
                                    </tbody>
                                </table>
                            </div>
                        @else
                            <p class="text-gray-500">Aucune réservation en cours</p>
                        @endif
                    </div>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/layouts/app.blade.php
================
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'La Partageothèque') }}</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.12.0/dist/cdn.min.js"></script>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="font-sans antialiased">
<div class="min-h-screen bg-gray-100">
    @if(Route::has('login') && request()->route()->getName() !== 'login' && request()->route()->getName() !== 'register')
        @include('layouts.navigation')
    @endif

    <!-- Page Heading -->
    @if (isset($header))
        <header class="bg-white shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                {{ $header }}
            </div>
        </header>
    @endif

    <!-- Page Content -->
    <main>
        @if(session('success'))
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4">
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                    {{ session('success') }}
                </div>
            </div>
        @endif

        @if(session('error'))
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4">
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                    {{ session('error') }}
                </div>
            </div>
        @endif

        {{ $slot ?? '' }}
        @yield('content')
    </main>
</div>
</body>
</html>

================
File: resources/views/layouts/navigation.blade.php
================
<div x-data="{ sidebarOpen: false, userMenuOpen: false, adminMenuOpen: false }">
    <!-- Sidebar for desktop -->
    <div class="hidden md:flex md:flex-col md:fixed md:inset-y-0 md:z-10 md:w-64 bg-gradient-to-b from-blue-800 to-blue-900 text-white">
        <!-- Logo -->
        <div class="flex items-center justify-center h-16 px-4 bg-blue-900">
            <a href="{{ route('dashboard') }}" class="text-xl font-bold tracking-wide">
                <span class="text-white">La Partageothèque</span>
            </a>
        </div>
        <!-- Navigation -->
        <div class="flex-1 flex flex-col overflow-y-auto">
            <nav class="flex-1 px-2 py-4 space-y-2">
                <a href="{{ route('dashboard') }}" class="{{ request()->routeIs('dashboard') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                    <i class="fas fa-home mr-3 text-blue-300"></i>
                    Tableau de bord
                </a>

                @if(Auth::user()->hasPermission('view-catalog'))
                    <a href="{{ route('items.index') }}" class="{{ request()->routeIs('items.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                        <i class="fas fa-box-open mr-3 text-blue-300"></i>
                        Catalogue
                    </a>
                @endif

                @if(Auth::user()->hasPermission('create-loan') || Auth::user()->hasPermission('return-loan'))
                    <a href="{{ route('loans.index') }}" class="{{ request()->routeIs('loans.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                        <i class="fas fa-handshake mr-3 text-blue-300"></i>
                        Emprunts
                    </a>
                @endif

                @if(Auth::user()->hasPermission('create-reservation') || Auth::user()->hasPermission('edit-reservation'))
                    <a href="{{ route('reservations.index') }}" class="{{ request()->routeIs('reservations.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                        <i class="fas fa-calendar-alt mr-3 text-blue-300"></i>
                        Réservations
                    </a>
                @endif

                <!-- Accès rapide -->
                @if(Auth::user()->hasPermission('create-loan') || Auth::user()->hasPermission('return-loan') ||
                    Auth::user()->hasPermission('reserve-item') || Auth::user()->hasPermission('create-payment') ||
                    Auth::user()->hasPermission('create-user'))
                    <div x-data="{ open: false }">
                        <button @click="open = !open" class="w-full text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                            <i class="fas fa-bolt mr-3 text-blue-300"></i>
                            <span class="flex-1 text-left">Accès rapide</span>
                            <i class="fas" :class="open ? 'fa-chevron-down' : 'fa-chevron-right'"></i>
                        </button>
                        <div x-show="open" class="pl-6 mt-1 space-y-1">
                            @if(Auth::user()->hasPermission('create-loan'))
                                <a href="{{ route('loans.create') }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-plus-circle mr-3 text-blue-300"></i>
                                    Déclarer un emprunt
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('reserve-item'))
                                <a href="{{ route('reservations.create') }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-calendar-plus mr-3 text-blue-300"></i>
                                    Réserver un objet
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('return-loan'))
                                <a href="{{ route('loans.index', ['status' => 'active']) }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-undo-alt mr-3 text-blue-300"></i>
                                    Déclarer un retour
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('create-payment'))
                                <a href="{{ route('payments.create') }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-money-bill mr-3 text-blue-300"></i>
                                    Enregistrer un paiement
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('create-user'))
                                <a href="{{ route('users.create') }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-user-plus mr-3 text-blue-300"></i>
                                    Créer un utilisateur
                                </a>
                            @endif
                        </div>
                    </div>
                @endif

                <!-- Administration -->
                @if(Auth::user()->hasPermission('edit-item') ||
                    Auth::user()->hasPermission('create-user') ||
                    Auth::user()->hasPermission('edit-role-permissions') ||
                    Auth::user()->hasPermission('view-all-activity-logs'))
                    <div x-data="{ open: false }">
                        <button @click="open = !open" class="w-full text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                            <i class="fas fa-cogs mr-3 text-blue-300"></i>
                            <span class="flex-1 text-left">Administration</span>
                            <i class="fas" :class="open ? 'fa-chevron-down' : 'fa-chevron-right'"></i>
                        </button>
                        <div x-show="open" class="pl-6 mt-1 space-y-1">
                            @if(Auth::user()->hasPermission('edit-item'))
                                <a href="{{ route('categories.index') }}" class="{{ request()->routeIs('categories.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-tags mr-3 text-blue-300"></i>
                                    Catégories
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('create-payment') || Auth::user()->hasPermission('edit-payment'))
                                <a href="{{ route('payments.index') }}" class="{{ request()->routeIs('payments.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-money-bill-wave mr-3 text-blue-300"></i>
                                    Paiements
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('create-user') || Auth::user()->hasPermission('edit-user'))
                                <a href="{{ route('users.index') }}" class="{{ request()->routeIs('users.*') && !request()->routeIs('users.validate') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-users mr-3 text-blue-300"></i>
                                    Utilisateurs
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('create-user'))
                                <a href="{{ route('users.validate') }}" class="{{ request()->routeIs('users.validate') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-user-check mr-3 text-blue-300"></i>
                                    Validation
                                    @if(App\Models\User::where('is_validated', false)->count() > 0)
                                        <span class="bg-red-500 text-white text-xs px-2 py-1 rounded-full ml-2">
                                            {{ App\Models\User::where('is_validated', false)->count() }}
                                        </span>
                                    @endif
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('create-role') || Auth::user()->hasPermission('edit-role-permissions'))
                                <a href="{{ route('roles.index') }}" class="{{ request()->routeIs('roles.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-shield-alt mr-3 text-blue-300"></i>
                                    Rôles & Permissions
                                </a>
                            @endif

                            @if(Auth::user()->hasPermission('view-all-activity-logs') || Auth::user()->hasPermission('view-own-activity-logs'))
                                <a href="{{ route('activity-logs.index') }}" class="{{ request()->routeIs('activity-logs.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                    <i class="fas fa-history mr-3 text-blue-300"></i>
                                    Journal d'activité
                                </a>
                            @endif
                        </div>
                    </div>
                @endif
            </nav>
        </div>
    </div>

    <!-- Mobile sidebar -->
    <div x-show="sidebarOpen" class="md:hidden fixed inset-0 flex z-40" style="display: none;">
        <div @click="sidebarOpen = false" x-show="sidebarOpen" x-transition:enter="transition-opacity ease-linear duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition-opacity ease-linear duration-300" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" class="fixed inset-0" style="display: none;">
            <div class="absolute inset-0 bg-gray-600 opacity-75"></div>
        </div>

        <div x-show="sidebarOpen" x-transition:enter="transition ease-in-out duration-300 transform" x-transition:enter-start="-translate-x-full" x-transition:enter-end="translate-x-0" x-transition:leave="transition ease-in-out duration-300 transform" x-transition:leave-start="translate-x-0" x-transition:leave-end="-translate-x-full" class="relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-gradient-to-b from-blue-800 to-blue-900" style="display: none;">
            <div class="absolute top-0 right-0 -mr-12 pt-2">
                <button @click="sidebarOpen = false" class="ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                    <span class="sr-only">Fermer le menu</span>
                    <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="flex-shrink-0 flex items-center px-4">
                <h1 class="text-xl font-bold text-white">La Partageothèque</h1>
            </div>

            <div class="mt-5 flex-1 h-0 overflow-y-auto">
                <nav class="px-2 space-y-1">
                    <a href="{{ route('dashboard') }}" class="{{ request()->routeIs('dashboard') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                        <i class="fas fa-home mr-3 text-blue-300"></i>
                        Tableau de bord
                    </a>

                    <!-- Accès rapide mobile -->
                    @if(Auth::user()->hasPermission('create-loan') || Auth::user()->hasPermission('return-loan') ||
                        Auth::user()->hasPermission('reserve-item') || Auth::user()->hasPermission('create-payment') ||
                        Auth::user()->hasPermission('create-user'))
                        <div x-data="{ open: false }">
                            <button @click="open = !open" class="w-full text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                <i class="fas fa-bolt mr-3 text-blue-300"></i>
                                <span class="flex-1 text-left">Accès rapide</span>
                                <i class="fas" :class="open ? 'fa-chevron-down' : 'fa-chevron-right'"></i>
                            </button>
                            <div x-show="open" class="pl-6 mt-1 space-y-1">
                                @if(Auth::user()->hasPermission('create-loan'))
                                    <a href="{{ route('loans.create') }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-plus-circle mr-3 text-blue-300"></i>
                                        Déclarer un emprunt
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('reserve-item'))
                                    <a href="{{ route('reservations.create') }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-calendar-plus mr-3 text-blue-300"></i>
                                        Réserver un objet
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('return-loan'))
                                    <a href="{{ route('loans.index', ['status' => 'active']) }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-undo-alt mr-3 text-blue-300"></i>
                                        Déclarer un retour
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('create-payment'))
                                    <a href="{{ route('payments.create') }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-money-bill mr-3 text-blue-300"></i>
                                        Enregistrer un paiement
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('create-user'))
                                    <a href="{{ route('users.create') }}" class="text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-user-plus mr-3 text-blue-300"></i>
                                        Créer un utilisateur
                                    </a>
                                @endif
                            </div>
                        </div>
                    @endif

                    @if(Auth::user()->hasPermission('view-catalog'))
                        <a href="{{ route('items.index') }}" class="{{ request()->routeIs('items.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                            <i class="fas fa-box-open mr-3 text-blue-300"></i>
                            Catalogue
                        </a>
                    @endif

                    @if(Auth::user()->hasPermission('create-loan') || Auth::user()->hasPermission('return-loan'))
                        <a href="{{ route('loans.index') }}" class="{{ request()->routeIs('loans.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                            <i class="fas fa-handshake mr-3 text-blue-300"></i>
                            Emprunts
                        </a>
                    @endif

                    @if(Auth::user()->hasPermission('create-reservation') || Auth::user()->hasPermission('edit-reservation'))
                        <a href="{{ route('reservations.index') }}" class="{{ request()->routeIs('reservations.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                            <i class="fas fa-calendar-alt mr-3 text-blue-300"></i>
                            Réservations
                        </a>
                    @endif

                    <!-- Administration mobile -->
                    @if(Auth::user()->hasPermission('edit-item') ||
                        Auth::user()->hasPermission('create-user') ||
                        Auth::user()->hasPermission('edit-role-permissions') ||
                        Auth::user()->hasPermission('view-all-activity-logs'))
                        <div x-data="{ open: false }">
                            <button @click="open = !open" class="w-full text-white hover:bg-blue-700 group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                <i class="fas fa-cogs mr-3 text-blue-300"></i>
                                <span class="flex-1 text-left">Administration</span>
                                <i class="fas" :class="open ? 'fa-chevron-down' : 'fa-chevron-right'"></i>
                            </button>
                            <div x-show="open" class="pl-6 mt-1 space-y-1">
                                @if(Auth::user()->hasPermission('edit-item'))
                                    <a href="{{ route('categories.index') }}" class="{{ request()->routeIs('categories.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-tags mr-3 text-blue-300"></i>
                                        Catégories
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('create-payment') || Auth::user()->hasPermission('edit-payment'))
                                    <a href="{{ route('payments.index') }}" class="{{ request()->routeIs('payments.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-money-bill-wave mr-3 text-blue-300"></i>
                                        Paiements
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('create-user') || Auth::user()->hasPermission('edit-user'))
                                    <a href="{{ route('users.index') }}" class="{{ request()->routeIs('users.*') && !request()->routeIs('users.validate') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-users mr-3 text-blue-300"></i>
                                        Utilisateurs
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('create-user'))
                                    <a href="{{ route('users.validate') }}" class="{{ request()->routeIs('users.validate') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-user-check mr-3 text-blue-300"></i>
                                        Validation
                                        @if(App\Models\User::where('is_validated', false)->count() > 0)
                                            <span class="bg-red-500 text-white text-xs px-2 py-1 rounded-full ml-2">
                                                {{ App\Models\User::where('is_validated', false)->count() }}
                                            </span>
                                        @endif
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('create-role') || Auth::user()->hasPermission('edit-role-permissions'))
                                    <a href="{{ route('roles.index') }}" class="{{ request()->routeIs('roles.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-shield-alt mr-3 text-blue-300"></i>
                                        Rôles & Permissions
                                    </a>
                                @endif

                                @if(Auth::user()->hasPermission('view-all-activity-logs') || Auth::user()->hasPermission('view-own-activity-logs'))
                                    <a href="{{ route('activity-logs.index') }}" class="{{ request()->routeIs('activity-logs.*') ? 'bg-blue-700' : 'hover:bg-blue-700' }} text-white group flex items-center px-3 py-2 text-sm font-medium rounded-md">
                                        <i class="fas fa-history mr-3 text-blue-300"></i>
                                        Journal d'activité
                                    </a>
                                @endif
                            </div>
                        </div>
                    @endif
                </nav>
            </div>

            <div class="flex-shrink-0 flex p-4 bg-blue-800">
                <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10 flex items-center justify-center bg-blue-600 rounded-full text-white">
                        {{ Auth::user()->name[0] }}
                    </div>
                    <div class="ml-3 w-full">
                        <div class="text-base font-medium text-white truncate">{{ Auth::user()->name }}</div>
                        <div class="text-sm font-medium text-blue-300 truncate">{{ Auth::user()->email }}</div>
                        <div class="mt-2 flex">
                            <a href="{{ route('profile.edit') }}" class="text-xs text-blue-200 hover:text-white mr-3">Profil</a>
                            <form method="POST" action="{{ route('logout') }}">
                                @csrf
                                <button type="submit" class="text-xs !text-blue-200 hover:text-white">Déconnexion</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main content area -->
    <div class="md:pl-64 flex flex-col flex-1">
        <!-- Top bar on mobile -->
        <div class="sticky top-0 z-10 flex-shrink-0 flex h-16 bg-white shadow md:hidden">
            <button @click="sidebarOpen = true" type="button" class="px-4 border-r border-gray-200 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 md:hidden">
                <span class="sr-only">Ouvrir le menu</span>
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <div class="flex-1 px-4 flex justify-between">
                <div class="flex-1 flex items-center">
                    <h1 class="text-xl font-semibold text-gray-800">La Partageothèque</h1>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: resources/views/loans/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Créer un emprunt') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('loans.store') }}" method="POST">
                    @csrf

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div x-data="setupAutocomplete('user_id', '{{ route('api.users.search') }}')">
                            <label for="user_search" class="block text-sm font-medium text-gray-700">Emprunteur</label>
                            <div class="relative">
                                <input
                                    type="text"
                                    id="user_search"
                                    x-model="search"
                                    @focus="showResults = search.length > 1"
                                    @click.away="showResults = false"
                                    placeholder="Rechercher un utilisateur..."
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                                >
                                <input type="hidden" name="user_id" id="user_id" :value="selectedId">
                                <button type="button" @click="clear" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500" x-show="selectedId">
                                    <i class="fas fa-times"></i>
                                </button>

                                <!-- Dropdown results -->
                                <div
                                    x-show="showResults"
                                    class="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-md py-1 text-sm"
                                    style="display: none;"
                                >
                                    <div x-show="isLoading" class="px-4 py-2 text-gray-500">Chargement...</div>
                                    <div x-show="!isLoading && results.length === 0" class="px-4 py-2 text-gray-500">Aucun résultat trouvé</div>

                                    <template x-for="(result, index) in results" :key="index">
                                        <div
                                            @click="selectOption(result)"
                                            class="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                                            x-text="result.name"
                                        ></div>
                                    </template>
                                </div>
                            </div>
                            @error('user_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div x-data="setupAutocomplete('item_id', '{{ route('api.items.search') }}')">
                            <label for="item_search" class="block text-sm font-medium text-gray-700">Objet</label>
                            <div class="relative">
                                <input
                                    type="text"
                                    id="item_search"
                                    x-model="search"
                                    @focus="showResults = search.length > 1"
                                    @click.away="showResults = false"
                                    placeholder="Rechercher un objet..."
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                                >
                                <input type="hidden" name="item_id" id="item_id" :value="selectedId">
                                <button type="button" @click="clear" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500" x-show="selectedId">
                                    <i class="fas fa-times"></i>
                                </button>

                                <!-- Dropdown results -->
                                <div
                                    x-show="showResults"
                                    class="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-md py-1 text-sm"
                                    style="display: none;"
                                >
                                    <div x-show="isLoading" class="px-4 py-2 text-gray-500">Chargement...</div>
                                    <div x-show="!isLoading && results.length === 0" class="px-4 py-2 text-gray-500">Aucun résultat trouvé</div>

                                    <template x-for="(result, index) in results" :key="index">
                                        <div
                                            @click="selectOption(result)"
                                            class="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                                            x-text="result.name"
                                        ></div>
                                    </template>
                                </div>
                            </div>
                            @error('item_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="loan_date" class="block text-sm font-medium text-gray-700">Date d'emprunt</label>
                            <input type="date" name="loan_date" id="loan_date" value="{{ old('loan_date', date('Y-m-d')) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('loan_date')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="due_date" class="block text-sm font-medium text-gray-700">Date de retour prévue</label>
                            <input type="date" name="due_date" id="due_date" value="{{ old('due_date', date('Y-m-d', strtotime('+1 week'))) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('due_date')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea name="notes" id="notes" rows="2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('notes') }}</textarea>
                        @error('notes')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('loans.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Créer l'emprunt
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/loans/edit.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Modifier l\'emprunt') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('loans.update', $loan) }}" method="POST">
                    @csrf
                    @method('PUT')

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="user_id" class="block text-sm font-medium text-gray-700">Emprunteur</label>
                            <select name="user_id" id="user_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                @foreach($users as $user)
                                    <option value="{{ $user->id }}" {{ old('user_id', $loan->user_id) == $user->id ? 'selected' : '' }}>
                                        {{ $user->name }} ({{ $user->email }})
                                    </option>
                                @endforeach
                            </select>
                            @error('user_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Objet</label>
                            <div class="mt-1 block w-full rounded-md border-gray-300 bg-gray-100 py-2 px-3">
                                {{ $loan->item->name }} ({{ $loan->item->identifier }})
                            </div>
                            <input type="hidden" name="item_id" value="{{ $loan->item_id }}">
                        </div>

                        <div>
                            <label for="loan_date" class="block text-sm font-medium text-gray-700">Date d'emprunt</label>
                            <input type="date" name="loan_date" id="loan_date" value="{{ old('loan_date', $loan->loan_date->format('Y-m-d')) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('loan_date')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="due_date" class="block text-sm font-medium text-gray-700">Date de retour prévue</label>
                            <input type="date" name="due_date" id="due_date" value="{{ old('due_date', $loan->due_date->format('Y-m-d')) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('due_date')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea name="notes" id="notes" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('notes', $loan->notes) }}</textarea>
                        @error('notes')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('loans.show', $loan) }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Mettre à jour
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/loans/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Gestion des emprunts') }}
            </h2>
            @if(auth()->user()->hasPermission('create-loan'))
                <a href="{{ route('loans.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Nouvel emprunt
                </a>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <!-- Filtres -->
                <form action="{{ route('loans.index') }}" method="GET" class="mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div>
                            <label for="status" class="block text-sm font-medium text-gray-700">Statut</label>
                            <select id="status" name="status" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Tous les statuts</option>
                                <option value="active" {{ request('status') == 'active' ? 'selected' : '' }}>En cours</option>
                                <option value="returned" {{ request('status') == 'returned' ? 'selected' : '' }}>Retournés</option>
                            </select>
                        </div>

                        <div>
                            <label for="user" class="block text-sm font-medium text-gray-700">Utilisateur</label>
                            <select id="user" name="user" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Tous les utilisateurs</option>
                                @foreach($users as $user)
                                    <option value="{{ $user->id }}" {{ request('user') == $user->id ? 'selected' : '' }}>
                                        {{ $user->name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>

                        <div>
                            <label for="search" class="block text-sm font-medium text-gray-700">Recherche</label>
                            <input type="text" id="search" name="search" value="{{ request('search') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Nom de l'objet ou identifiant">
                        </div>

                        <div class="flex items-end">
                            <button type="submit" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Filtrer</button>
                            @if(request()->hasAny(['status', 'user', 'search']))
                                <a href="{{ route('loans.index') }}" class="ml-2 text-gray-600 hover:text-gray-800">Réinitialiser</a>
                            @endif
                        </div>
                    </div>
                </form>

                <!-- Liste des emprunts -->
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">Objet</th>
                            <th class="py-2 px-4 border-b text-left">Emprunteur</th>
                            <th class="py-2 px-4 border-b text-left">Date d'emprunt</th>
                            <th class="py-2 px-4 border-b text-left">Date de retour prévue</th>
                            <th class="py-2 px-4 border-b text-left">Statut</th>
                            <th class="py-2 px-4 border-b text-left">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($loans as $loan)
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $loan->item->name }}</td>
                                <td class="py-2 px-4 border-b">{{ $loan->user->name }}</td>
                                <td class="py-2 px-4 border-b">{{ $loan->loan_date->format('d/m/Y') }}</td>
                                <td class="py-2 px-4 border-b">{{ $loan->due_date->format('d/m/Y') }}</td>
                                <td class="py-2 px-4 border-b">
                                    @if($loan->return_date)
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                Retourné le {{ $loan->return_date->format('d/m/Y') }}
                                            </span>
                                    @elseif($loan->due_date < now())
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                                En retard
                                            </span>
                                    @else
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                                En cours
                                            </span>
                                    @endif
                                </td>
                                <td class="py-2 px-4 border-b">
                                    <div class="flex space-x-2">
                                        <a href="{{ route('loans.show', $loan) }}" class="text-blue-600 hover:text-blue-900">Voir</a>

                                        @if(!$loan->return_date && auth()->user()->hasPermission('return-loan'))
                                            <form action="{{ route('loans.return', $loan) }}" method="POST" class="inline">
                                                @csrf
                                                <button type="submit" class="text-green-600 hover:text-green-900">Retourner</button>
                                            </form>
                                        @endif

                                        @if(!$loan->return_date && auth()->user()->hasPermission('extend-loan'))
                                            <a href="{{ route('loans.show', $loan) }}?extend=true" class="text-purple-600 hover:text-purple-900">Prolonger</a>
                                        @endif

                                        @if(auth()->user()->hasPermission('edit-loan'))
                                            <a href="{{ route('loans.edit', $loan) }}" class="text-indigo-600 hover:text-indigo-900">Modifier</a>
                                        @endif

                                        @if(auth()->user()->hasPermission('delete-loan'))
                                            <form action="{{ route('loans.destroy', $loan) }}" method="POST" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cet emprunt ?');">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="!text-red-600 hover:!text-red-900">Supprimer</button>
                                            </form>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="6" class="py-4 px-4 border-b text-center text-gray-500">Aucun emprunt trouvé</td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="mt-4">
                    {{ $loans->links() }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/loans/show.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Détails de l\'emprunt') }}
            </h2>
            <div>
                @if(auth()->user()->hasPermission('edit-loan'))
                    <a href="{{ route('loans.edit', $loan) }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
                        Modifier
                    </a>
                @endif

                @if(!$loan->return_date && auth()->user()->hasPermission('return-loan'))
                    <form action="{{ route('loans.return', $loan) }}" method="POST" class="inline">
                        @csrf
                        <button type="submit" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                            Retourner
                        </button>
                    </form>
                @endif
            </div>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Informations de l'emprunt -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Informations de l'emprunt</h3>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Emprunteur</p>
                            <p class="mt-1 text-gray-900">{{ $loan->user->name }}</p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Objet</p>
                            <p class="mt-1 text-gray-900">
                                <a href="{{ route('items.show', $loan->item) }}" class="text-blue-600 hover:text-blue-900">
                                    {{ $loan->item->name }} ({{ $loan->item->identifier }})
                                </a>
                            </p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Date d'emprunt</p>
                            <p class="mt-1 text-gray-900">{{ $loan->loan_date->format('d/m/Y') }}</p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Date de retour prévue</p>
                            <p class="mt-1 text-gray-900">{{ $loan->due_date->format('d/m/Y') }}</p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Date de retour réelle</p>
                            <p class="mt-1 text-gray-900">
                                @if($loan->return_date)
                                    {{ $loan->return_date->format('d/m/Y') }}
                                @else
                                    <span class="text-yellow-600">En cours</span>
                                @endif
                            </p>
                        </div>

                        @if($loan->notes)
                            <div class="mb-4">
                                <p class="text-sm font-medium text-gray-500">Notes</p>
                                <p class="mt-1 text-gray-900">{{ $loan->notes }}</p>
                            </div>
                        @endif
                    </div>

                    <!-- Informations additionnelles et actions -->
                    <div>
                        @if(!$loan->return_date && request()->has('extend') && auth()->user()->hasPermission('extend-loan'))
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Prolonger l'emprunt</h3>

                            <form action="{{ route('loans.extend', $loan) }}" method="POST">
                                @csrf

                                <div class="mb-4">
                                    <label for="due_date" class="block text-sm font-medium text-gray-700">Nouvelle date de retour</label>
                                    <input type="date" name="due_date" id="due_date" value="{{ old('due_date', $loan->due_date->addDays(7)->format('Y-m-d')) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                    @error('due_date')
                                    <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                    @enderror
                                </div>

                                <button type="submit" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">
                                    Prolonger l'emprunt
                                </button>
                            </form>
                        @elseif(!$loan->return_date && auth()->user()->hasPermission('extend-loan'))
                            <div class="mb-6">
                                <a href="{{ route('loans.show', $loan) }}?extend=true" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">
                                    Prolonger l'emprunt
                                </a>
                            </div>
                        @endif

                        <div class="mt-6">
                            <p class="text-sm font-medium text-gray-500">Statut</p>
                            <p class="mt-1">
                                @if($loan->return_date)
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                        Retourné
                                    </span>
                                @elseif($loan->due_date < now())
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                        En retard
                                    </span>
                                @else
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                        En cours
                                    </span>
                                @endif
                            </p>
                        </div>

                        <div class="mt-4">
                            <p class="text-sm font-medium text-gray-500">Créé par</p>
                            <p class="mt-1 text-gray-900">{{ $loan->creator->name ?? 'Inconnu' }}</p>
                        </div>

                        @if($loan->updated_by)
                            <div class="mt-4">
                                <p class="text-sm font-medium text-gray-500">Dernière modification par</p>
                                <p class="mt-1 text-gray-900">{{ $loan->updater->name ?? 'Inconnu' }}</p>
                            </div>
                        @endif
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/payments/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Créer un paiement') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('payments.store') }}" method="POST">
                    @csrf

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="user_id" class="block text-sm font-medium text-gray-700">Utilisateur</label>
                            <select name="user_id" id="user_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Sélectionner un utilisateur</option>
                                @foreach($users as $user)
                                    <option value="{{ $user->id }}" {{ old('user_id') == $user->id ? 'selected' : '' }}>
                                        {{ $user->name }} ({{ $user->email }})
                                    </option>
                                @endforeach
                            </select>
                            @error('user_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="type" class="block text-sm font-medium text-gray-700">Type de paiement</label>
                            <select name="type" id="type" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="membership" {{ old('type') == 'membership' ? 'selected' : '' }}>Cotisation</option>
                                <option value="caution" {{ old('type') == 'caution' ? 'selected' : '' }}>Caution</option>
                                <option value="donation" {{ old('type') == 'donation' ? 'selected' : '' }}>Don</option>
                            </select>
                            @error('type')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="amount" class="block text-sm font-medium text-gray-700">Montant (€)</label>
                            <input type="number" name="amount" id="amount" value="{{ old('amount', 0) }}" step="0.01" min="0" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('amount')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="payment_date" class="block text-sm font-medium text-gray-700">Date du paiement</label>
                            <input type="date" name="payment_date" id="payment_date" value="{{ old('payment_date', date('Y-m-d')) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('payment_date')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="expiry_date" class="block text-sm font-medium text-gray-700">Date d'expiration</label>
                            <input type="date" name="expiry_date" id="expiry_date" value="{{ old('expiry_date') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            <p class="text-xs text-gray-500 mt-1">Obligatoire pour les cotisations, optionnel pour les autres types</p>
                            @error('expiry_date')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea name="notes" id="notes" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('notes') }}</textarea>
                        @error('notes')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('payments.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Créer le paiement
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/payments/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Gestion des paiements') }}
            </h2>
            @if(auth()->user()->hasPermission('create-payment'))
                <a href="{{ route('payments.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Nouveau paiement
                </a>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <!-- Filtres -->
                <form action="{{ route('payments.index') }}" method="GET" class="mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div>
                            <label for="user" class="block text-sm font-medium text-gray-700">Utilisateur</label>
                            <select id="user" name="user" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Tous les utilisateurs</option>
                                @foreach($users as $user)
                                    <option value="{{ $user->id }}" {{ request('user') == $user->id ? 'selected' : '' }}>
                                        {{ $user->name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>

                        <div>
                            <label for="type" class="block text-sm font-medium text-gray-700">Type</label>
                            <select id="type" name="type" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Tous les types</option>
                                <option value="membership" {{ request('type') == 'membership' ? 'selected' : '' }}>Cotisation</option>
                                <option value="caution" {{ request('type') == 'caution' ? 'selected' : '' }}>Caution</option>
                                <option value="donation" {{ request('type') == 'donation' ? 'selected' : '' }}>Don</option>
                            </select>
                        </div>

                        <div>
                            <label for="date_from" class="block text-sm font-medium text-gray-700">Date de début</label>
                            <input type="date" id="date_from" name="date_from" value="{{ request('date_from') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        </div>

                        <div class="flex items-end">
                            <button type="submit" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Filtrer</button>
                            @if(request()->hasAny(['user', 'type', 'date_from', 'date_to']))
                                <a href="{{ route('payments.index') }}" class="ml-2 text-gray-600 hover:text-gray-800">Réinitialiser</a>
                            @endif
                        </div>
                    </div>
                </form>

                <!-- Liste des paiements -->
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">Date</th>
                            <th class="py-2 px-4 border-b text-left">Utilisateur</th>
                            <th class="py-2 px-4 border-b text-left">Type</th>
                            <th class="py-2 px-4 border-b text-left">Montant</th>
                            <th class="py-2 px-4 border-b text-left">Expiration</th>
                            <th class="py-2 px-4 border-b text-left">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($payments as $payment)
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $payment->payment_date->format('d/m/Y') }}</td>
                                <td class="py-2 px-4 border-b">{{ $payment->user->name }}</td>
                                <td class="py-2 px-4 border-b">
                                    @if($payment->type == 'membership')
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                                Cotisation
                                            </span>
                                    @elseif($payment->type == 'caution')
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                                Caution
                                            </span>
                                    @elseif($payment->type == 'donation')
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                Don
                                            </span>
                                    @endif
                                </td>
                                <td class="py-2 px-4 border-b">{{ number_format($payment->amount, 2) }} €</td>
                                <td class="py-2 px-4 border-b">
                                    @if($payment->expiry_date)
                                        {{ $payment->expiry_date->format('d/m/Y') }}
                                    @else
                                        -
                                    @endif
                                </td>
                                <td class="py-2 px-4 border-b">
                                    <div class="flex space-x-2">
                                        <a href="{{ route('payments.show', $payment) }}" class="text-blue-600 hover:text-blue-900">Voir</a>

                                        @if(auth()->user()->hasPermission('edit-payment'))
                                            <a href="{{ route('payments.edit', $payment) }}" class="text-indigo-600 hover:text-indigo-900">Modifier</a>
                                        @endif

                                        @if(auth()->user()->hasPermission('delete-payment'))
                                            <form action="{{ route('payments.destroy', $payment) }}" method="POST" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce paiement ?');">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="!text-red-600 hover:!text-red-900">Supprimer</button>
                                            </form>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="6" class="py-4 px-4 border-b text-center text-gray-500">Aucun paiement trouvé</td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="mt-4">
                    {{ $payments->links() }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/permissions/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Liste des permissions') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">Nom</th>
                            <th class="py-2 px-4 border-b text-left">Slug</th>
                            <th class="py-2 px-4 border-b text-left">Description</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($permissions as $permission)
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $permission->name }}</td>
                                <td class="py-2 px-4 border-b"><code>{{ $permission->slug }}</code></td>
                                <td class="py-2 px-4 border-b">{{ $permission->description }}</td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="3" class="py-4 px-4 border-b text-center text-gray-500">Aucune permission trouvée</td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/profile/edit.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Mon profil') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    <section>
                        <header>
                            <h2 class="text-lg font-medium text-gray-900">
                                {{ __('Informations du profil') }}
                            </h2>
                            <p class="mt-1 text-sm text-gray-600">
                                {{ __('Mettez à jour vos informations de profil et votre adresse e-mail.') }}
                            </p>
                        </header>

                        <form method="post" action="{{ route('profile.update') }}" class="mt-6 space-y-6">
                            @csrf
                            @method('patch')

                            <div>
                                <label for="name" class="block text-sm font-medium text-gray-700">{{ __('Nom') }}</label>
                                <input id="name" name="name" type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" value="{{ old('name', auth()->user()->name) }}" required autofocus autocomplete="name" />
                                @error('name')
                                <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="email" class="block text-sm font-medium text-gray-700">{{ __('Email') }}</label>
                                <input id="email" name="email" type="email" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" value="{{ old('email', auth()->user()->email) }}" required autocomplete="email" />
                                @error('email')
                                <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="phone" class="block text-sm font-medium text-gray-700">{{ __('Téléphone') }}</label>
                                <input id="phone" name="phone" type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" value="{{ old('phone', auth()->user()->phone) }}" />
                                @error('phone')
                                <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="address" class="block text-sm font-medium text-gray-700">{{ __('Adresse') }}</label>
                                <textarea id="address" name="address" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('address', auth()->user()->address) }}</textarea>
                                @error('address')
                                <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                @enderror
                            </div>

                            <div class="flex items-center gap-4">
                                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">{{ __('Enregistrer') }}</button>

                                @if (session('status') === 'profile-updated')
                                    <p class="text-sm text-gray-600">{{ __('Enregistré.') }}</p>
                                @endif
                            </div>
                        </form>
                    </section>
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    <section>
                        <header>
                            <h2 class="text-lg font-medium text-gray-900">
                                {{ __('Mettre à jour le mot de passe') }}
                            </h2>
                            <p class="mt-1 text-sm text-gray-600">
                                {{ __('Utilisez un mot de passe long et aléatoire pour rester en sécurité.') }}
                            </p>
                        </header>

                        <form method="post" action="{{ route('password.update') }}" class="mt-6 space-y-6">
                            @csrf
                            @method('put')

                            <div>
                                <label for="current_password" class="block text-sm font-medium text-gray-700">{{ __('Mot de passe actuel') }}</label>
                                <input id="current_password" name="current_password" type="password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" autocomplete="current-password" />
                                @error('current_password')
                                <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="password" class="block text-sm font-medium text-gray-700">{{ __('Nouveau mot de passe') }}</label>
                                <input id="password" name="password" type="password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" autocomplete="new-password" />
                                @error('password')
                                <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="password_confirmation" class="block text-sm font-medium text-gray-700">{{ __('Confirmer le mot de passe') }}</label>
                                <input id="password_confirmation" name="password_confirmation" type="password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" autocomplete="new-password" />
                                @error('password_confirmation')
                                <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                @enderror
                            </div>

                            <div class="flex items-center gap-4">
                                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">{{ __('Enregistrer') }}</button>

                                @if (session('status') === 'password-updated')
                                    <p class="text-sm text-gray-600">{{ __('Enregistré.') }}</p>
                                @endif
                            </div>
                        </form>
                    </section>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/reservations/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Créer une réservation') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('reservations.store') }}" method="POST">
                    @csrf

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="user_id" class="block text-sm font-medium text-gray-700">Demandeur</label>
                            <select name="user_id" id="user_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Sélectionner un utilisateur</option>
                                @foreach($users as $user)
                                    <option value="{{ $user->id }}" {{ old('user_id') == $user->id ? 'selected' : '' }}>
                                        {{ $user->name }} ({{ $user->email }})
                                    </option>
                                @endforeach
                            </select>
                            @error('user_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="item_id" class="block text-sm font-medium text-gray-700">Objet</label>
                            <select name="item_id" id="item_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Sélectionner un objet</option>
                                @foreach($items as $item)
                                    <option value="{{ $item->id }}" {{ old('item_id') == $item->id || request('item_id') == $item->id ? 'selected' : '' }}>
                                        {{ $item->name }} ({{ $item->identifier }})
                                    </option>
                                @endforeach
                            </select>
                            @error('item_id')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="reservation_date" class="block text-sm font-medium text-gray-700">Date de réservation</label>
                            <input type="date" name="reservation_date" id="reservation_date" value="{{ old('reservation_date', date('Y-m-d')) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('reservation_date')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea name="notes" id="notes" rows="2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('notes') }}</textarea>
                        @error('notes')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('reservations.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Créer la réservation
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/reservations/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Gestion des réservations') }}
            </h2>
            @if(auth()->user()->hasPermission('create-reservation'))
                <a href="{{ route('reservations.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Nouvelle réservation
                </a>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <!-- Filtres -->
                <form action="{{ route('reservations.index') }}" method="GET" class="mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div>
                            <label for="status" class="block text-sm font-medium text-gray-700">Statut</label>
                            <select id="status" name="status" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Tous les statuts</option>
                                <option value="active" {{ request('status') == 'active' ? 'selected' : '' }}>Actives</option>
                                <option value="inactive" {{ request('status') == 'inactive' ? 'selected' : '' }}>Inactives</option>
                            </select>
                        </div>

                        <div>
                            <label for="user" class="block text-sm font-medium text-gray-700">Utilisateur</label>
                            <select id="user" name="user" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Tous les utilisateurs</option>
                                @foreach($users as $user)
                                    <option value="{{ $user->id }}" {{ request('user') == $user->id ? 'selected' : '' }}>
                                        {{ $user->name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>

                        <div>
                            <label for="search" class="block text-sm font-medium text-gray-700">Recherche</label>
                            <input type="text" id="search" name="search" value="{{ request('search') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Nom de l'objet ou identifiant">
                        </div>

                        <div class="flex items-end">
                            <button type="submit" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">Filtrer</button>
                            @if(request()->hasAny(['status', 'user', 'search']))
                                <a href="{{ route('reservations.index') }}" class="ml-2 text-gray-600 hover:text-gray-800">Réinitialiser</a>
                            @endif
                        </div>
                    </div>
                </form>

                <!-- Liste des réservations -->
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">Objet</th>
                            <th class="py-2 px-4 border-b text-left">Demandeur</th>
                            <th class="py-2 px-4 border-b text-left">Date de réservation</th>
                            <th class="py-2 px-4 border-b text-left">Expiration</th>
                            <th class="py-2 px-4 border-b text-left">Priorité</th>
                            <th class="py-2 px-4 border-b text-left">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($reservations as $reservation)
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $reservation->item->name }}</td>
                                <td class="py-2 px-4 border-b">{{ $reservation->user->name }}</td>
                                <td class="py-2 px-4 border-b">{{ $reservation->reservation_date->format('d/m/Y') }}</td>
                                <td class="py-2 px-4 border-b">{{ $reservation->expiry_date->format('d/m/Y') }}</td>
                                <td class="py-2 px-4 border-b">{{ $reservation->priority_order }}</td>
                                <td class="py-2 px-4 border-b">
                                    <div class="flex space-x-2">
                                        <a href="{{ route('reservations.show', $reservation) }}" class="text-blue-600 hover:text-blue-900">Voir</a>

                                        @if(auth()->user()->hasPermission('edit-reservation'))
                                            <a href="{{ route('reservations.edit', $reservation) }}" class="text-indigo-600 hover:text-indigo-900">Modifier</a>
                                        @endif

                                        @if(auth()->user()->hasPermission('delete-reservation'))
                                            <form action="{{ route('reservations.destroy', $reservation) }}" method="POST" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette réservation ?');">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="!text-red-600 hover:!text-red-900">Supprimer</button>
                                            </form>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="6" class="py-4 px-4 border-b text-center text-gray-500">Aucune réservation trouvée</td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="mt-4">
                    {{ $reservations->links() }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/reservations/show.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Détails de la réservation') }}
            </h2>
            <div>
                @if(auth()->user()->hasPermission('edit-reservation'))
                    <a href="{{ route('reservations.edit', $reservation) }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
                        Modifier
                    </a>
                @endif

                @if($reservation->is_active && auth()->user()->hasPermission('delete-reservation'))
                    <form action="{{ route('reservations.destroy', $reservation) }}" method="POST" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir annuler cette réservation ?');">
                        @csrf
                        @method('DELETE')
                        <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                            Annuler
                        </button>
                    </form>
                @endif
            </div>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Informations de la réservation -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Informations de la réservation</h3>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Demandeur</p>
                            <p class="mt-1 text-gray-900">{{ $reservation->user->name }}</p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Objet</p>
                            <p class="mt-1 text-gray-900">
                                <a href="{{ route('items.show', $reservation->item) }}" class="text-blue-600 hover:text-blue-900">
                                    {{ $reservation->item->name }} ({{ $reservation->item->identifier }})
                                </a>
                            </p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Date de réservation</p>
                            <p class="mt-1 text-gray-900">{{ $reservation->reservation_date->format('d/m/Y') }}</p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Date d'expiration</p>
                            <p class="mt-1 text-gray-900">{{ $reservation->expiry_date->format('d/m/Y') }}</p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Priorité</p>
                            <p class="mt-1 text-gray-900">{{ $reservation->priority_order }}</p>
                        </div>

                        @if($reservation->notes)
                            <div class="mb-4">
                                <p class="text-sm font-medium text-gray-500">Notes</p>
                                <p class="mt-1 text-gray-900">{{ $reservation->notes }}</p>
                            </div>
                        @endif
                    </div>

                    <!-- Informations additionnelles et actions -->
                    <div>
                        <div class="mb-6">
                            <p class="text-sm font-medium text-gray-500">Statut</p>
                            <p class="mt-1">
                                @if(!$reservation->is_active)
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                        Inactive
                                    </span>
                                @elseif($reservation->expiry_date < now())
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                        Expirée
                                    </span>
                                @else
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                        Active
                                    </span>
                                @endif
                            </p>
                        </div>

                        <div class="mt-4">
                            <p class="text-sm font-medium text-gray-500">Créé par</p>
                            <p class="mt-1 text-gray-900">{{ $reservation->creator->name ?? 'Inconnu' }}</p>
                        </div>

                        @if($reservation->updated_by)
                            <div class="mt-4">
                                <p class="text-sm font-medium text-gray-500">Dernière modification par</p>
                                <p class="mt-1 text-gray-900">{{ $reservation->updater->name ?? 'Inconnu' }}</p>
                            </div>
                        @endif
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/roles/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Créer un nouveau rôle') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('roles.store') }}" method="POST">
                    @csrf

                    <div class="mb-4">
                        <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                        <input type="text" name="name" id="name" value="{{ old('name') }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        @error('name')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mb-4">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea name="description" id="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('description') }}</textarea>
                        @error('description')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mb-4">
                        <label class="flex items-center">
                            <input type="checkbox" name="requires_validation" value="1" {{ old('requires_validation') ? 'checked' : '' }} class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            <span class="ml-2 text-sm text-gray-600">Nécessite une validation par un administrateur</span>
                        </label>
                    </div>

                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Permissions</label>

                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            @foreach($permissions as $permission)
                                <label class="flex items-center">
                                    <input type="checkbox" name="permissions[]" value="{{ $permission->id }}" {{ in_array($permission->id, old('permissions', [])) ? 'checked' : '' }} class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                    <span class="ml-2 text-sm text-gray-600">{{ $permission->name }}</span>
                                </label>
                            @endforeach
                        </div>

                        @error('permissions')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="flex items-center justify-end">
                        <a href="{{ route('roles.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Créer
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/roles/edit.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Modifier le rôle') }}: {{ $role->name }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('roles.update', $role) }}" method="POST">
                    @csrf
                    @method('PUT')

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                            <input type="text" name="name" id="name" value="{{ old('name', $role->name) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('name')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="requires_validation" class="flex items-center">
                                <input type="checkbox" name="requires_validation" id="requires_validation" value="1" {{ old('requires_validation', $role->requires_validation) ? 'checked' : '' }} class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <span class="ml-2 text-sm text-gray-600">Nécessite une validation par un administrateur</span>
                            </label>
                        </div>
                    </div>

                    <div class="mb-6">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea name="description" id="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('description', $role->description) }}</textarea>
                        @error('description')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Permissions</label>

                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            @foreach($permissions as $permission)
                                <label class="flex items-center">
                                    <input type="checkbox" name="permissions[]" value="{{ $permission->id }}" {{ in_array($permission->id, old('permissions', $role->permissions->pluck('id')->toArray())) ? 'checked' : '' }} class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                    <span class="ml-2 text-sm text-gray-600">{{ $permission->name }}</span>
                                </label>
                            @endforeach
                        </div>

                        @error('permissions')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>
                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('roles.show', $role) }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Mettre à jour
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/roles/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Gestion des rôles') }}
            </h2>
            @if(auth()->user()->hasPermission('create-role'))
                <a href="{{ route('roles.create') }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Nouveau rôle
                </a>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">Nom</th>
                            <th class="py-2 px-4 border-b text-left">Description</th>
                            <th class="py-2 px-4 border-b text-left">Utilisateurs</th>
                            <th class="py-2 px-4 border-b text-left">Nécessite validation</th>
                            <th class="py-2 px-4 border-b text-left">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($roles as $role)
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $role->name }}</td>
                                <td class="py-2 px-4 border-b">{{ Str::limit($role->description, 100) }}</td>
                                <td class="py-2 px-4 border-b">{{ $role->users_count }}</td>
                                <td class="py-2 px-4 border-b">
                                    @if($role->requires_validation)
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                                Oui
                                            </span>
                                    @else
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                Non
                                            </span>
                                    @endif
                                </td>
                                <td class="py-2 px-4 border-b">
                                    <div class="flex space-x-2">
                                        <a href="{{ route('roles.show', $role) }}" class="text-blue-600 hover:text-blue-900">Voir</a>

                                        @if(auth()->user()->hasPermission('edit-role-permissions'))
                                            <a href="{{ route('roles.edit', $role) }}" class="text-indigo-600 hover:text-indigo-900">Modifier</a>
                                        @endif

                                        @if(auth()->user()->hasPermission('delete-role'))
                                            <form action="{{ route('roles.destroy', $role) }}" method="POST" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce rôle ?');">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="!text-red-600 hover:text-red-900">Supprimer</button>
                                            </form>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="5" class="py-4 px-4 border-b text-center text-gray-500">Aucun rôle trouvé</td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/roles/show.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Détails du rôle') }}: {{ $role->name }}
            </h2>
            <div>
                @if(auth()->user()->hasPermission('edit-role-permissions'))
                    <a href="{{ route('roles.edit', $role) }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                        Modifier
                    </a>
                @endif
            </div>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <div class="mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Informations</h3>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm font-medium text-gray-500">Nom</p>
                            <p class="mt-1 text-gray-900">{{ $role->name }}</p>
                        </div>

                        <div>
                            <p class="text-sm font-medium text-gray-500">Slug</p>
                            <p class="mt-1 text-gray-900">{{ $role->slug }}</p>
                        </div>

                        <div>
                            <p class="text-sm font-medium text-gray-500">Validation requise</p>
                            <p class="mt-1">
                                @if($role->requires_validation)
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                        Oui
                                    </span>
                                @else
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                        Non
                                    </span>
                                @endif
                            </p>
                        </div>

                        <div>
                            <p class="text-sm font-medium text-gray-500">Nombre d'utilisateurs</p>
                            <p class="mt-1 text-gray-900">{{ $role->users->count() }}</p>
                        </div>
                    </div>

                    @if($role->description)
                        <div class="mt-4">
                            <p class="text-sm font-medium text-gray-500">Description</p>
                            <p class="mt-1 text-gray-900">{{ $role->description }}</p>
                        </div>
                    @endif
                </div>

                <div class="mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Permissions</h3>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-2">
                        @forelse($role->permissions as $permission)
                            <div class="p-2 bg-gray-50 rounded">
                                <span class="font-medium">{{ $permission->name }}</span>
                                @if($permission->description)
                                    <p class="text-xs text-gray-500 mt-1">{{ $permission->description }}</p>
                                @endif
                            </div>
                        @empty
                            <p class="text-gray-500">Aucune permission attribuée.</p>
                        @endforelse
                    </div>
                </div>

                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Utilisateurs avec ce rôle</h3>

                    @if($role->users->count() > 0)
                        <div class="overflow-x-auto">
                            <table class="min-w-full bg-white">
                                <thead>
                                <tr>
                                    <th class="py-2 px-4 border-b text-left">Nom</th>
                                    <th class="py-2 px-4 border-b text-left">Email</th>
                                    <th class="py-2 px-4 border-b text-left">Statut</th>
                                    <th class="py-2 px-4 border-b text-left">Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach($role->users as $user)
                                    <tr>
                                        <td class="py-2 px-4 border-b">{{ $user->name }}</td>
                                        <td class="py-2 px-4 border-b">{{ $user->email }}</td>
                                        <td class="py-2 px-4 border-b">
                                            @if($user->is_validated)
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                        Actif
                                                    </span>
                                            @else
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                                        En attente
                                                    </span>
                                            @endif
                                        </td>
                                        <td class="py-2 px-4 border-b">
                                            <a href="{{ route('users.show', $user) }}" class="text-blue-600 hover:text-blue-900">Voir</a>
                                        </td>
                                    </tr>
                                @endforeach
                                </tbody>
                            </table>
                        </div>
                    @else
                        <p class="text-gray-500">Aucun utilisateur n'a ce rôle.</p>
                    @endif
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/search/results.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Résultats de recherche pour: ') }} "{{ $query }}"
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">{{ __('Objets') }}</h3>

                    @if($items->count() > 0)
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                            @foreach($items as $item)
                                <div class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                    <h4 class="font-medium text-blue-600">
                                        <a href="{{ route('items.show', $item) }}">{{ $item->name }}</a>
                                    </h4>
                                    <p class="text-sm text-gray-500">ID: {{ $item->identifier }}</p>
                                    <p class="text-sm mt-2 line-clamp-2">{{ $item->description }}</p>
                                </div>
                            @endforeach
                        </div>
                    @else
                        <p class="text-gray-500 mb-8">{{ __('Aucun objet trouvé.') }}</p>
                    @endif

                    <h3 class="text-lg font-medium text-gray-900 mb-4">{{ __('Catégories') }}</h3>

                    @if($categories->count() > 0)
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                            @foreach($categories as $category)
                                <div class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                    <h4 class="font-medium text-blue-600">
                                        <a href="{{ route('items.index', ['category' => $category->id]) }}">{{ $category->name }}</a>
                                    </h4>
                                    <p class="text-sm mt-2 line-clamp-2">{{ $category->description }}</p>
                                </div>
                            @endforeach
                        </div>
                    @else
                        <p class="text-gray-500 mb-8">{{ __('Aucune catégorie trouvée.') }}</p>
                    @endif

                    @if($users)
                        <h3 class="text-lg font-medium text-gray-900 mb-4">{{ __('Utilisateurs') }}</h3>

                        @if($users->count() > 0)
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                @foreach($users as $user)
                                    <div class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <h4 class="font-medium text-blue-600">
                                            <a href="{{ route('users.show', $user) }}">{{ $user->name }}</a>
                                        </h4>
                                        <p class="text-sm text-gray-500">{{ $user->email }}</p>
                                    </div>
                                @endforeach
                            </div>
                        @else
                            <p class="text-gray-500">{{ __('Aucun utilisateur trouvé.') }}</p>
                        @endif
                    @endif
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/users/create.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Créer un nouvel utilisateur') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('users.store') }}" method="POST">
                    @csrf

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                            <input type="text" name="name" id="name" value="{{ old('name') }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('name')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                            <input type="email" name="email" id="email" value="{{ old('email') }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('email')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="password" class="block text-sm font-medium text-gray-700">Mot de passe</label>
                            <input type="password" name="password" id="password" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('password')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="password_confirmation" class="block text-sm font-medium text-gray-700">Confirmer le mot de passe</label>
                            <input type="password" name="password_confirmation" id="password_confirmation" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        </div>

                        <div>
                            <label for="phone" class="block text-sm font-medium text-gray-700">Téléphone</label>
                            <input type="text" name="phone" id="phone" value="{{ old('phone') }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('phone')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="is_validated" class="flex items-center">
                                <input type="checkbox" name="is_validated" id="is_validated" value="1" {{ old('is_validated') ? 'checked' : '' }} class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <span class="ml-2 text-sm text-gray-600">Compte validé immédiatement</span>
                            </label>
                            <p class="text-xs text-gray-500 mt-1">Si décoché, l'utilisateur devra être validé manuellement avant de pouvoir se connecter</p>
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="address" class="block text-sm font-medium text-gray-700">Adresse</label>
                        <textarea name="address" id="address" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('address') }}</textarea>
                        @error('address')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Rôles</label>

                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            @foreach($roles as $role)
                                <label class="flex items-center">
                                    <input type="checkbox" name="roles[]" value="{{ $role->id }}" {{ in_array($role->id, old('roles', [])) ? 'checked' : '' }} class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                    <span class="ml-2 text-sm text-gray-600">{{ $role->name }}</span>
                                </label>
                            @endforeach
                        </div>

                        @error('roles')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('users.index') }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Créer l'utilisateur
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/users/edit.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Modifier l\'utilisateur') }}: {{ $user->name }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <form action="{{ route('users.update', $user) }}" method="POST">
                    @csrf
                    @method('PUT')

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                            <input type="text" name="name" id="name" value="{{ old('name', $user->name) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('name')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                            <input type="email" name="email" id="email" value="{{ old('email', $user->email) }}" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('email')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="phone" class="block text-sm font-medium text-gray-700">Téléphone</label>
                            <input type="text" name="phone" id="phone" value="{{ old('phone', $user->phone) }}" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            @error('phone')
                            <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                            @enderror
                        </div>

                        <div>
                            <label for="is_validated" class="flex items-center">
                                <input type="checkbox" name="is_validated" id="is_validated" value="1" {{ old('is_validated', $user->is_validated) ? 'checked' : '' }} class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <span class="ml-2 text-sm text-gray-600">Compte validé</span>
                            </label>
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="address" class="block text-sm font-medium text-gray-700">Adresse</label>
                        <textarea name="address" id="address" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">{{ old('address', $user->address) }}</textarea>
                        @error('address')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Rôles</label>

                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            @foreach($roles as $role)
                                <label class="flex items-center">
                                    <input type="checkbox" name="roles[]" value="{{ $role->id }}" {{ in_array($role->id, old('roles', $user->roles->pluck('id')->toArray())) ? 'checked' : '' }} class="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                    <span class="ml-2 text-sm text-gray-600">{{ $role->name }}</span>
                                </label>
                            @endforeach
                        </div>

                        @error('roles')
                        <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                        @enderror
                    </div>

                    <div class="mt-6 flex items-center justify-end">
                        <a href="{{ route('users.show', $user) }}" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</a>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Mettre à jour
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/users/index.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Gestion des utilisateurs') }}
            </h2>
            @if(auth()->user()->hasPermission('create-user'))
                <a href="{{ route('users.create') }}"
                   class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Nouvel utilisateur
                </a>
            @endif
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <!-- Filtres -->
                <form action="{{ route('users.index') }}" method="GET" class="mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label for="role" class="block text-sm font-medium text-gray-700">Rôle</label>
                            <select id="role" name="role"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">Tous les rôles</option>
                                @foreach($roles as $role)
                                    <option
                                        value="{{ $role->id }}" {{ request('role') == $role->id ? 'selected' : '' }}>
                                        {{ $role->name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>

                        <div>
                            <label for="search" class="block text-sm font-medium text-gray-700">Recherche</label>
                            <input type="text" id="search" name="search" value="{{ request('search') }}"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                                   placeholder="Nom ou email">
                        </div>

                        <div class="flex items-end">
                            <button type="submit" class="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700">
                                Filtrer
                            </button>
                            @if(request()->hasAny(['role', 'search']))
                                <a href="{{ route('users.index') }}" class="ml-2 text-gray-600 hover:text-gray-800">Réinitialiser</a>
                            @endif
                        </div>
                    </div>
                </form>

                <!-- Liste des utilisateurs -->
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead>
                        <tr>
                            <th class="py-2 px-4 border-b text-left">Nom</th>
                            <th class="py-2 px-4 border-b text-left">Email</th>
                            <th class="py-2 px-4 border-b text-left">Rôles</th>
                            <th class="py-2 px-4 border-b text-left">Statut</th>
                            <th class="py-2 px-4 border-b text-left">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @forelse($users as $user)
                            @if($user->name == "Utilisateur système" && $user->email == "system@partageotheque.local")
                                @continue
                            @endif
                            <tr>
                                <td class="py-2 px-4 border-b">{{ $user->name }}</td>
                                <td class="py-2 px-4 border-b">{{ $user->email }}</td>
                                <td class="py-2 px-4 border-b">
                                    @foreach($user->roles as $role)
                                        <span
                                            class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800 mr-1">
                                                {{ $role->name }}
                                            </span>
                                    @endforeach
                                </td>
                                <td class="py-2 px-4 border-b">
                                    @if($user->is_validated)
                                        <span
                                            class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                Actif
                                            </span>
                                    @else
                                        <span
                                            class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                                En attente
                                            </span>
                                    @endif
                                </td>
                                <td class="py-2 px-4 border-b">
                                    <div class="flex space-x-2">
                                        <a href="{{ route('users.show', $user) }}"
                                           class="text-blue-600 hover:text-blue-900">Voir</a>

                                        @if(auth()->user()->hasPermission('edit-user'))
                                            <a href="{{ route('users.edit', $user) }}"
                                               class="text-indigo-600 hover:text-indigo-900">Modifier</a>
                                        @endif

                                        @if(auth()->user()->hasPermission('delete-user'))
                                            <form action="{{ route('users.destroy', $user) }}" method="POST"
                                                  class="inline"
                                                  onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?');">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="!text-red-600 hover:text-red-900">
                                                    Supprimer
                                                </button>
                                            </form>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="5" class="py-4 px-4 border-b text-center text-gray-500">Aucun utilisateur
                                    trouvé
                                </td>
                            </tr>
                        @endforelse
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="mt-4">
                    {{ $users->links() }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/users/show.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Profil de l\'utilisateur') }}: {{ $user->name }}
            </h2>
            <div>
                @if(auth()->user()->hasPermission('edit-user'))
                    <a href="{{ route('users.edit', $user) }}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
                        Modifier
                    </a>
                @endif

                @if(auth()->user()->hasPermission('reset-user-password'))
                    <button onclick="togglePasswordReset()" class="bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded">
                        Réinitialiser le mot de passe
                    </button>
                @endif
            </div>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <!-- Formulaire de réinitialisation du mot de passe (masqué par défaut) -->
            @if(auth()->user()->hasPermission('reset-user-password'))
                <div id="passwordResetForm" class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6 mb-6" style="display: none;">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Réinitialiser le mot de passe</h3>

                    <form action="{{ route('users.reset-password', $user) }}" method="POST">
                        @csrf

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="password" class="block text-sm font-medium text-gray-700">Nouveau mot de passe</label>
                                <input type="password" name="password" id="password" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                @error('password')
                                <p class="text-red-500 text-xs mt-1">{{ $message }}</p>
                                @enderror
                            </div>

                            <div>
                                <label for="password_confirmation" class="block text-sm font-medium text-gray-700">Confirmer le mot de passe</label>
                                <input type="password" name="password_confirmation" id="password_confirmation" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            </div>
                        </div>

                        <div class="mt-6 flex items-center justify-end">
                            <button type="button" onclick="togglePasswordReset()" class="text-gray-600 hover:text-gray-900 mr-4">Annuler</button>
                            <button type="submit" class="bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded">
                                Réinitialiser
                            </button>
                        </div>
                    </form>
                </div>
            @endif

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Informations de l'utilisateur -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Informations personnelles</h3>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Nom</p>
                            <p class="mt-1 text-gray-900">{{ $user->name }}</p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Email</p>
                            <p class="mt-1 text-gray-900">{{ $user->email }}</p>
                        </div>

                        @if($user->phone)
                            <div class="mb-4">
                                <p class="text-sm font-medium text-gray-500">Téléphone</p>
                                <p class="mt-1 text-gray-900">{{ $user->phone }}</p>
                            </div>
                        @endif

                        @if($user->address)
                            <div class="mb-4">
                                <p class="text-sm font-medium text-gray-500">Adresse</p>
                                <p class="mt-1 text-gray-900">{{ $user->address }}</p>
                            </div>
                        @endif

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Statut</p>
                            <p class="mt-1">
                                @if($user->is_validated)
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                        Actif
                                    </span>
                                @else
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                        En attente de validation
                                    </span>
                                @endif
                            </p>
                        </div>

                        <div class="mb-4">
                            <p class="text-sm font-medium text-gray-500">Rôles</p>
                            <div class="mt-1 space-y-1">
                                @foreach($user->roles as $role)
                                    <div class="flex items-center">
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                            {{ $role->name }}
                                        </span>
                                        <span class="ml-2 text-xs text-gray-500">{{ $role->description }}</span>
                                    </div>
                                @endforeach
                            </div>
                        </div>
                    </div>

                    <!-- Statistiques et activité récente -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Activité</h3>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <p class="text-sm font-medium text-gray-500">Emprunts actifs</p>
                                <p class="text-2xl font-bold text-gray-900">{{ $user->loans->whereNull('return_date')->count() }}</p>
                            </div>

                            <div class="bg-gray-50 p-4 rounded-lg">
                                <p class="text-sm font-medium text-gray-500">Réservations actives</p>
                                <p class="text-2xl font-bold text-gray-900">{{ $user->reservations->where('is_active', true)->count() }}</p>
                            </div>

                            <div class="bg-gray-50 p-4 rounded-lg">
                                <p class="text-sm font-medium text-gray-500">Total des emprunts</p>
                                <p class="text-2xl font-bold text-gray-900">{{ $user->loans->count() }}</p>
                            </div>

                            <div class="bg-gray-50 p-4 rounded-lg">
                                <p class="text-sm font-medium text-gray-500">Membre depuis</p>
                                <p class="text-xl font-bold text-gray-900">{{ $user->created_at->format('d/m/Y') }}</p>
                            </div>
                        </div>

                        <!-- Emprunts récents -->
                        <h4 class="font-medium text-gray-700 mb-2">Emprunts récents</h4>
                        @if($user->loans->count() > 0)
                            <ul class="divide-y divide-gray-200">
                                @foreach($user->loans->sortByDesc('created_at')->take(3) as $loan)
                                    <li class="py-2">
                                        <div class="flex justify-between">
                                            <div>
                                                <p class="text-sm font-medium text-gray-900">{{ $loan->item->name }}</p>
                                                <p class="text-xs text-gray-500">
                                                    {{ $loan->loan_date->format('d/m/Y') }} -
                                                    @if($loan->return_date)
                                                        Retourné le {{ $loan->return_date->format('d/m/Y') }}
                                                    @else
                                                        Retour prévu le {{ $loan->due_date->format('d/m/Y') }}
                                                    @endif
                                                </p>
                                            </div>
                                            <a href="{{ route('loans.show', $loan) }}" class="text-blue-600 hover:text-blue-900 text-xs">Détails</a>
                                        </div>
                                    </li>
                                @endforeach
                            </ul>
                        @else
                            <p class="text-sm text-gray-500">Aucun emprunt trouvé.</p>
                        @endif
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function togglePasswordReset() {
            const form = document.getElementById('passwordResetForm');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }
    </script>
</x-app-layout>

================
File: resources/views/users/validate.blade.php
================
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Validation des utilisateurs') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                @if($pendingUsers->count() > 0)
                    <div class="overflow-x-auto">
                        <table class="min-w-full bg-white">
                            <thead>
                            <tr>
                                <th class="py-2 px-4 border-b text-left">Nom</th>
                                <th class="py-2 px-4 border-b text-left">Email</th>
                                <th class="py-2 px-4 border-b text-left">Rôles</th>
                                <th class="py-2 px-4 border-b text-left">Date d'inscription</th>
                                <th class="py-2 px-4 border-b text-left">Actions</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach($pendingUsers as $user)
                                <tr>
                                    <td class="py-2 px-4 border-b">{{ $user->name }}</td>
                                    <td class="py-2 px-4 border-b">{{ $user->email }}</td>
                                    <td class="py-2 px-4 border-b">
                                        @foreach($user->roles as $role)
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800 mr-1">
                                                    {{ $role->name }}
                                                </span>
                                        @endforeach
                                    </td>
                                    <td class="py-2 px-4 border-b">{{ $user->created_at->format('d/m/Y H:i') }}</td>
                                    <td class="py-2 px-4 border-b">
                                        <div class="flex space-x-2">
                                            <form action="{{ route('users.validate.approve', $user) }}" method="POST" class="inline">
                                                @csrf
                                                <button type="submit" class="bg-green-500 hover:bg-green-700 text-white font-bold py-1 px-3 rounded text-xs">
                                                    Valider
                                                </button>
                                            </form>

                                            <form action="{{ route('users.validate.reject', $user) }}" method="POST" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir rejeter cet utilisateur ? Cette action ne peut pas être annulée.');">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded text-xs">
                                                    Rejeter
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                            </tbody>
                        </table>
                    </div>
                @else
                    <p class="text-gray-500 text-center">Aucun utilisateur en attente de validation.</p>
                @endif
            </div>
        </div>
    </div>
</x-app-layout>

================
File: resources/views/welcome.blade.php
================
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Laravel</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,600&display=swap" rel="stylesheet" />

        <!-- Styles -->
        <style>
            /* ! tailwindcss v3.2.4 | MIT License | https://tailwindcss.com */*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::after,::before{--tw-content:''}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:Figtree, sans-serif;font-feature-settings:normal}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::-webkit-backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.relative{position:relative}.mx-auto{margin-left:auto;margin-right:auto}.mx-6{margin-left:1.5rem;margin-right:1.5rem}.ml-4{margin-left:1rem}.mt-16{margin-top:4rem}.mt-6{margin-top:1.5rem}.mt-4{margin-top:1rem}.-mt-px{margin-top:-1px}.mr-1{margin-right:0.25rem}.flex{display:flex}.inline-flex{display:inline-flex}.grid{display:grid}.h-16{height:4rem}.h-7{height:1.75rem}.h-6{height:1.5rem}.h-5{height:1.25rem}.min-h-screen{min-height:100vh}.w-auto{width:auto}.w-16{width:4rem}.w-7{width:1.75rem}.w-6{width:1.5rem}.w-5{width:1.25rem}.max-w-7xl{max-width:80rem}.shrink-0{flex-shrink:0}.scale-100{--tw-scale-x:1;--tw-scale-y:1;transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.grid-cols-1{grid-template-columns:repeat(1, minmax(0, 1fr))}.items-center{align-items:center}.justify-center{justify-content:center}.gap-6{gap:1.5rem}.gap-4{gap:1rem}.self-center{align-self:center}.rounded-lg{border-radius:0.5rem}.rounded-full{border-radius:9999px}.bg-gray-100{--tw-bg-opacity:1;background-color:rgb(243 244 246 / var(--tw-bg-opacity))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}.bg-red-50{--tw-bg-opacity:1;background-color:rgb(254 242 242 / var(--tw-bg-opacity))}.bg-dots-darker{background-image:url("data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.22676 0C1.91374 0 2.45351 0.539773 2.45351 1.22676C2.45351 1.91374 1.91374 2.45351 1.22676 2.45351C0.539773 2.45351 0 1.91374 0 1.22676C0 0.539773 0.539773 0 1.22676 0Z' fill='rgba(0,0,0,0.07)'/%3E%3C/svg%3E")}.from-gray-700\/50{--tw-gradient-from:rgb(55 65 81 / 0.5);--tw-gradient-to:rgb(55 65 81 / 0);--tw-gradient-stops:var(--tw-gradient-from), var(--tw-gradient-to)}.via-transparent{--tw-gradient-to:rgb(0 0 0 / 0);--tw-gradient-stops:var(--tw-gradient-from), transparent, var(--tw-gradient-to)}.bg-center{background-position:center}.stroke-red-500{stroke:#ef4444}.stroke-gray-400{stroke:#9ca3af}.p-6{padding:1.5rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.text-center{text-align:center}.text-right{text-align:right}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-sm{font-size:0.875rem;line-height:1.25rem}.font-semibold{font-weight:600}.leading-relaxed{line-height:1.625}.text-gray-600{--tw-text-opacity:1;color:rgb(75 85 99 / var(--tw-text-opacity))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39 / var(--tw-text-opacity))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128 / var(--tw-text-opacity))}.underline{-webkit-text-decoration-line:underline;text-decoration-line:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.shadow-2xl{--tw-shadow:0 25px 50px -12px rgb(0 0 0 / 0.25);--tw-shadow-colored:0 25px 50px -12px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.shadow-gray-500\/20{--tw-shadow-color:rgb(107 114 128 / 0.2);--tw-shadow:var(--tw-shadow-colored)}.transition-all{transition-property:all;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.selection\:bg-red-500 *::selection{--tw-bg-opacity:1;background-color:rgb(239 68 68 / var(--tw-bg-opacity))}.selection\:text-white *::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.selection\:bg-red-500::selection{--tw-bg-opacity:1;background-color:rgb(239 68 68 / var(--tw-bg-opacity))}.selection\:text-white::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.hover\:text-gray-900:hover{--tw-text-opacity:1;color:rgb(17 24 39 / var(--tw-text-opacity))}.hover\:text-gray-700:hover{--tw-text-opacity:1;color:rgb(55 65 81 / var(--tw-text-opacity))}.focus\:rounded-sm:focus{border-radius:0.125rem}.focus\:outline:focus{outline-style:solid}.focus\:outline-2:focus{outline-width:2px}.focus\:outline-red-500:focus{outline-color:#ef4444}.group:hover .group-hover\:stroke-gray-600{stroke:#4b5563}@media (prefers-reduced-motion: no-preference){.motion-safe\:hover\:scale-\[1\.01\]:hover{--tw-scale-x:1.01;--tw-scale-y:1.01;transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}}@media (prefers-color-scheme: dark){.dark\:bg-gray-900{--tw-bg-opacity:1;background-color:rgb(17 24 39 / var(--tw-bg-opacity))}.dark\:bg-gray-800\/50{background-color:rgb(31 41 55 / 0.5)}.dark\:bg-red-800\/20{background-color:rgb(153 27 27 / 0.2)}.dark\:bg-dots-lighter{background-image:url("data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.22676 0C1.91374 0 2.45351 0.539773 2.45351 1.22676C2.45351 1.91374 1.91374 2.45351 1.22676 2.45351C0.539773 2.45351 0 1.91374 0 1.22676C0 0.539773 0.539773 0 1.22676 0Z' fill='rgba(255,255,255,0.07)'/%3E%3C/svg%3E")}.dark\:bg-gradient-to-bl{background-image:linear-gradient(to bottom left, var(--tw-gradient-stops))}.dark\:stroke-gray-600{stroke:#4b5563}.dark\:text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175 / var(--tw-text-opacity))}.dark\:text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.dark\:shadow-none{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.dark\:ring-1{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dark\:ring-inset{--tw-ring-inset:inset}.dark\:ring-white\/5{--tw-ring-color:rgb(255 255 255 / 0.05)}.dark\:hover\:text-white:hover{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.group:hover .dark\:group-hover\:stroke-gray-400{stroke:#9ca3af}}@media (min-width: 640px){.sm\:fixed{position:fixed}.sm\:top-0{top:0px}.sm\:right-0{right:0px}.sm\:ml-0{margin-left:0px}.sm\:flex{display:flex}.sm\:items-center{align-items:center}.sm\:justify-center{justify-content:center}.sm\:justify-between{justify-content:space-between}.sm\:text-left{text-align:left}.sm\:text-right{text-align:right}}@media (min-width: 768px){.md\:grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}}@media (min-width: 1024px){.lg\:gap-8{gap:2rem}.lg\:p-8{padding:2rem}}
        </style>
    </head>
    <body class="antialiased">
        <div class="relative sm:flex sm:justify-center sm:items-center min-h-screen bg-dots-darker bg-center bg-gray-100 dark:bg-dots-lighter dark:bg-gray-900 selection:bg-red-500 selection:text-white">
            @if (Route::has('login'))
                <div class="sm:fixed sm:top-0 sm:right-0 p-6 text-right">
                    @auth
                        <a href="{{ url('/home') }}" class="font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Home</a>
                    @else
                        <a href="{{ route('login') }}" class="font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Log in</a>

                        @if (Route::has('register'))
                            <a href="{{ route('register') }}" class="ml-4 font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Register</a>
                        @endif
                    @endauth
                </div>
            @endif

            <div class="max-w-7xl mx-auto p-6 lg:p-8">
                <div class="flex justify-center">
                    <svg viewBox="0 0 62 65" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-16 w-auto bg-gray-100 dark:bg-gray-900">
                        <path d="M61.8548 14.6253C61.8778 14.7102 61.8895 14.7978 61.8897 14.8858V28.5615C61.8898 28.737 61.8434 28.9095 61.7554 29.0614C61.6675 29.2132 61.5409 29.3392 61.3887 29.4265L49.9104 36.0351V49.1337C49.9104 49.4902 49.7209 49.8192 49.4118 49.9987L25.4519 63.7916C25.3971 63.8227 25.3372 63.8427 25.2774 63.8639C25.255 63.8714 25.2338 63.8851 25.2101 63.8913C25.0426 63.9354 24.8666 63.9354 24.6991 63.8913C24.6716 63.8838 24.6467 63.8689 24.6205 63.8589C24.5657 63.8389 24.5084 63.8215 24.456 63.7916L0.501061 49.9987C0.348882 49.9113 0.222437 49.7853 0.134469 49.6334C0.0465019 49.4816 0.000120578 49.3092 0 49.1337L0 8.10652C0 8.01678 0.0124642 7.92953 0.0348998 7.84477C0.0423783 7.8161 0.0598282 7.78993 0.0697995 7.76126C0.0884958 7.70891 0.105946 7.65531 0.133367 7.6067C0.152063 7.5743 0.179485 7.54812 0.20192 7.51821C0.230588 7.47832 0.256763 7.43719 0.290416 7.40229C0.319084 7.37362 0.356476 7.35243 0.388883 7.32751C0.425029 7.29759 0.457436 7.26518 0.498568 7.2415L12.4779 0.345059C12.6296 0.257786 12.8015 0.211853 12.9765 0.211853C13.1515 0.211853 13.3234 0.257786 13.475 0.345059L25.4531 7.2415H25.4556C25.4955 7.26643 25.5292 7.29759 25.5653 7.32626C25.5977 7.35119 25.6339 7.37362 25.6625 7.40104C25.6974 7.43719 25.7224 7.47832 25.7523 7.51821C25.7735 7.54812 25.8021 7.5743 25.8196 7.6067C25.8483 7.65656 25.8645 7.70891 25.8844 7.76126C25.8944 7.78993 25.9118 7.8161 25.9193 7.84602C25.9423 7.93096 25.954 8.01853 25.9542 8.10652V33.7317L35.9355 27.9844V14.8846C35.9355 14.7973 35.948 14.7088 35.9704 14.6253C35.9792 14.5954 35.9954 14.5692 36.0053 14.5405C36.0253 14.4882 36.0427 14.4346 36.0702 14.386C36.0888 14.3536 36.1163 14.3274 36.1375 14.2975C36.1674 14.2576 36.1923 14.2165 36.2272 14.1816C36.2559 14.1529 36.292 14.1317 36.3244 14.1068C36.3618 14.0769 36.3942 14.0445 36.4341 14.0208L48.4147 7.12434C48.5663 7.03694 48.7383 6.99094 48.9133 6.99094C49.0883 6.99094 49.2602 7.03694 49.4118 7.12434L61.3899 14.0208C61.4323 14.0457 61.4647 14.0769 61.5021 14.1055C61.5333 14.1305 61.5694 14.1529 61.5981 14.1803C61.633 14.2165 61.6579 14.2576 61.6878 14.2975C61.7103 14.3274 61.7377 14.3536 61.7551 14.386C61.7838 14.4346 61.8 14.4882 61.8199 14.5405C61.8312 14.5692 61.8474 14.5954 61.8548 14.6253ZM59.893 27.9844V16.6121L55.7013 19.0252L49.9104 22.3593V33.7317L59.8942 27.9844H59.893ZM47.9149 48.5566V37.1768L42.2187 40.4299L25.953 49.7133V61.2003L47.9149 48.5566ZM1.99677 9.83281V48.5566L23.9562 61.199V49.7145L12.4841 43.2219L12.4804 43.2194L12.4754 43.2169C12.4368 43.1945 12.4044 43.1621 12.3682 43.1347C12.3371 43.1097 12.3009 43.0898 12.2735 43.0624L12.271 43.0586C12.2386 43.0275 12.2162 42.9888 12.1887 42.9539C12.1638 42.9203 12.1339 42.8916 12.114 42.8567L12.1127 42.853C12.0903 42.8156 12.0766 42.7707 12.0604 42.7283C12.0442 42.6909 12.023 42.656 12.013 42.6161C12.0005 42.5688 11.998 42.5177 11.9931 42.4691C11.9881 42.4317 11.9781 42.3943 11.9781 42.3569V15.5801L6.18848 12.2446L1.99677 9.83281ZM12.9777 2.36177L2.99764 8.10652L12.9752 13.8513L22.9541 8.10527L12.9752 2.36177H12.9777ZM18.1678 38.2138L23.9574 34.8809V9.83281L19.7657 12.2459L13.9749 15.5801V40.6281L18.1678 38.2138ZM48.9133 9.14105L38.9344 14.8858L48.9133 20.6305L58.8909 14.8846L48.9133 9.14105ZM47.9149 22.3593L42.124 19.0252L37.9323 16.6121V27.9844L43.7219 31.3174L47.9149 33.7317V22.3593ZM24.9533 47.987L39.59 39.631L46.9065 35.4555L36.9352 29.7145L25.4544 36.3242L14.9907 42.3482L24.9533 47.987Z" fill="#FF2D20"/>
                    </svg>
                </div>

                <div class="mt-16">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8">
                        <a href="https://laravel.com/docs" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Documentation</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel has wonderful documentation covering every aspect of the framework. Whether you are a newcomer or have prior experience with Laravel, we recommend reading our documentation from beginning to end.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <a href="https://laracasts.com" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Laracasts</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laracasts offers thousands of video tutorials on Laravel, PHP, and JavaScript development. Check them out, see for yourself, and massively level up your development skills in the process.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <a href="https://laravel-news.com" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 01-2.25 2.25M16.5 7.5V18a2.25 2.25 0 002.25 2.25M16.5 7.5V4.875c0-.621-.504-1.125-1.125-1.125H4.125C3.504 3.75 3 4.254 3 4.875V18a2.25 2.25 0 002.25 2.25h13.5M6 7.5h3v3H6v-3z" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Laravel News</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel News is a community driven portal and newsletter aggregating all of the latest and most important news in the Laravel ecosystem, including new package releases and tutorials.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <div class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6.115 5.19l.319 1.913A6 6 0 008.11 10.36L9.75 12l-.387.775c-.217.433-.132.956.21 1.298l1.348 1.348c.21.21.329.497.329.795v1.089c0 .426.24.815.622 1.006l.153.076c.433.217.956.132 1.298-.21l.723-.723a8.7 8.7 0 002.288-4.042 1.087 1.087 0 00-.358-1.099l-1.33-1.108c-.251-.21-.582-.299-.905-.245l-1.17.195a1.125 1.125 0 01-.98-.314l-.295-.295a1.125 1.125 0 010-1.591l.13-.132a1.125 1.125 0 011.3-.21l.603.302a.809.809 0 001.086-1.086L14.25 7.5l1.256-.837a4.5 4.5 0 001.528-1.732l.146-.292M6.115 5.19A9 9 0 1017.18 4.64M6.115 5.19A8.965 8.965 0 0112 3c1.929 0 3.716.607 5.18 1.64" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Vibrant Ecosystem</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel's robust library of first-party tools and libraries, such as <a href="https://forge.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Forge</a>, <a href="https://vapor.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Vapor</a>, <a href="https://nova.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Nova</a>, and <a href="https://envoyer.io" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Envoyer</a> help you take your projects to the next level. Pair them with powerful open source libraries like <a href="https://laravel.com/docs/billing" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Cashier</a>, <a href="https://laravel.com/docs/dusk" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Dusk</a>, <a href="https://laravel.com/docs/broadcasting" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Echo</a>, <a href="https://laravel.com/docs/horizon" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Horizon</a>, <a href="https://laravel.com/docs/sanctum" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Sanctum</a>, <a href="https://laravel.com/docs/telescope" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Telescope</a>, and more.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex justify-center mt-16 px-0 sm:items-center sm:justify-between">
                    <div class="text-center text-sm text-gray-500 dark:text-gray-400 sm:text-left">
                        <div class="flex items-center gap-4">
                            <a href="https://github.com/sponsors/taylorotwell" class="group inline-flex items-center hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="-mt-px mr-1 w-5 h-5 stroke-gray-400 dark:stroke-gray-600 group-hover:stroke-gray-600 dark:group-hover:stroke-gray-400">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z" />
                                </svg>
                                Sponsor
                            </a>
                        </div>
                    </div>

                    <div class="ml-4 text-center text-sm text-gray-500 dark:text-gray-400 sm:text-right sm:ml-0">
                        Laravel v{{ Illuminate\Foundation\Application::VERSION }} (PHP v{{ PHP_VERSION }})
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>

================
File: routes/api.php
================
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

================
File: routes/App/Http/Controllers/Api/ItemController.php
================
<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Item;
use Illuminate\Http\Request;

class ItemController extends Controller
{
    public function search(Request $request)
    {
        // Si on recherche un ID spécifique
        if ($request->has('id')) {
            return Item::where('id', $request->id)
                ->select('id', 'name', 'identifier')
                ->get();
        }

        // Recherche par nom ou identifiant
        $query = $request->get('q', '');

        return Item::where('name', 'like', "%{$query}%")
            ->orWhere('identifier', 'like', "%{$query}%")
            ->where('is_archived', false)
            ->whereHas('status', function($q) {
                $q->where('slug', 'in-stock');
            })
            ->select('id', 'name', 'identifier')
            ->limit(10)
            ->get()
            ->map(function($item) {
                $item->name = $item->name . ' (' . $item->identifier . ')';
                return $item;
            });
    }
}

================
File: routes/App/Http/Controllers/Api/UserController.php
================
<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function search(Request $request)
    {
        // Si on recherche un ID spécifique
        if ($request->has('id')) {
            return User::where('id', $request->id)
                ->select('id', 'name', 'email')
                ->get();
        }

        // Recherche par nom ou email
        $query = $request->get('q', '');

        return User::where('name', 'like', "%{$query}%")
            ->orWhere('email', 'like', "%{$query}%")
            ->and('email', 'not like', "system@partageotheque.local")
            ->select('id', 'name', 'email')
            ->limit(10)
            ->get()
            ->map(function($user) {
                $user->name = $user->name . ' (' . $user->email . ')';
                return $user;
            });
    }
}

================
File: routes/auth.php
================
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])
        ->name('register');

    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])
        ->name('login');

    Route::post('login', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
        ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
        ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
        ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
        ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
        ->name('verification.notice');

    Route::get('verify-emil/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
        ->middleware('throttle:6,1')
        ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
        ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
        ->name('logout');
});

================
File: routes/channels.php
================
<?php

use Illuminate\Support\Facades\Broadcast;

/*
|--------------------------------------------------------------------------
| Broadcast Channels
|--------------------------------------------------------------------------
|
| Here you may register all of the event broadcasting channels that your
| application supports. The given channel authorization callbacks are
| used to check if an authenticated user can listen to the channel.
|
*/

Broadcast::channel('App.Models.User.{id}', function ($user, $id) {
    return (int) $user->id === (int) $id;
});

================
File: routes/console.php
================
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

/*
|--------------------------------------------------------------------------
| Console Routes
|--------------------------------------------------------------------------
|
| This file is where you may define all of your Closure based console
| commands. Each Closure is bound to a command instance allowing a
| simple approach to interacting with each command's IO methods.
|
*/

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');

================
File: routes/web.php
================
<?php

use App\Http\Controllers\ActivityLogController;
use App\Http\Controllers\CategoryController;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\ItemController;
use App\Http\Controllers\LoanController;
use App\Http\Controllers\PaymentController;
use App\Http\Controllers\PermissionController;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\ReservationController;
use App\Http\Controllers\RoleController;
use App\Http\Controllers\SearchController;
use App\Http\Controllers\UserController;
use App\Http\Controllers\UserValidationController;
use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return redirect()->route('login');
});



Route::middleware(['auth'])->group(function () {
    // Dashboard
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
    Route::get('/search', [SearchController::class, 'index'])->name('search');

    // Catalog & Items
    Route::middleware(['permission:view-catalog'])->group(function () {
        Route::get('/items', [ItemController::class, 'index'])->name('items.index');

        // La route 'create' doit être AVANT la route avec paramètre
        Route::get('/items/create', [ItemController::class, 'create'])
            ->middleware(['permission:create-item'])
            ->name('items.create');

        Route::post('/items', [ItemController::class, 'store'])
            ->middleware(['permission:create-item'])
            ->name('items.store');

        Route::get('/items/{item}', [ItemController::class, 'show'])
            ->middleware(['permission:view-item-details'])
            ->name('items.show');
    });

    Route::middleware(['permission:create-item'])->group(function () {
        Route::get('/items/create', [ItemController::class, 'create'])->name('items.create');
        Route::post('/items', [ItemController::class, 'store'])->name('items.store');
    });

    Route::post('/items/{item}/duplicate', [ItemController::class, 'duplicate'])
        ->middleware(['permission:create-item'])
        ->name('items.duplicate');

    Route::middleware(['permission:edit-item'])->group(function () {
        Route::get('/items/{item}/edit', [ItemController::class, 'edit'])->name('items.edit');
        Route::put('/items/{item}', [ItemController::class, 'update'])->name('items.update');
    });

    Route::post('/items/{item}/reserve', [ReservationController::class, 'reserve'])
        ->middleware(['permission:reserve-item'])
        ->name('items.reserve');

    Route::delete('/items/{item}', [ItemController::class, 'destroy'])
        ->middleware(['permission:delete-item'])
        ->name('items.destroy');

    // Loans
    Route::middleware(['permission:create-loan'])->group(function () {
        Route::get('/loans', [LoanController::class, 'index'])->name('loans.index');
        Route::get('/loans/create', [LoanController::class, 'create'])->name('loans.create');
        Route::post('/loans', [LoanController::class, 'store'])->name('loans.store');
        Route::get('/loans/{loan}', [LoanController::class, 'show'])->name('loans.show');
    });

    Route::middleware(['permission:edit-loan'])->group(function () {
        Route::get('/loans/{loan}/edit', [LoanController::class, 'edit'])->name('loans.edit');
        Route::put('/loans/{loan}', [LoanController::class, 'update'])->name('loans.update');
    });

    Route::delete('/loans/{loan}', [LoanController::class, 'destroy'])
        ->middleware(['permission:delete-loan'])
        ->name('loans.destroy');

    Route::post('/loans/{loan}/return', [LoanController::class, 'returnItem'])
        ->middleware(['permission:return-loan'])
        ->name('loans.return');

    Route::post('/loans/{loan}/extend', [LoanController::class, 'extend'])
        ->middleware(['permission:extend-loan'])
        ->name('loans.extend');

    // Reservations
    Route::middleware(['permission:reserve-item'])->group(function () {
        Route::get('/reservations', [ReservationController::class, 'index'])->name('reservations.index');
        Route::get('/reservations/create', [ReservationController::class, 'create'])->name('reservations.create');
        Route::post('/reservations', [ReservationController::class, 'store'])->name('reservations.store');
        Route::get('/reservations/{reservation}', [ReservationController::class, 'show'])->name('reservations.show');
    });

    Route::middleware(['permission:edit-reservation'])->group(function () {
        Route::get('/reservations/{reservation}/edit', [ReservationController::class, 'edit'])->name('reservations.edit');
        Route::put('/reservations/{reservation}', [ReservationController::class, 'update'])->name('reservations.update');
    });

    Route::delete('/reservations/{reservation}', [ReservationController::class, 'destroy'])
        ->middleware(['permission:delete-reservation'])
        ->name('reservations.destroy');

    Route::post('/reservations/reorder', [ReservationController::class, 'reorder'])
        ->middleware(['permission:reorganize-queue'])
        ->name('reservations.reorder');

    // Payments
    Route::middleware(['permission:create-payment'])->group(function () {
        Route::get('/payments', [PaymentController::class, 'index'])->name('payments.index');
        Route::get('/payments/create', [PaymentController::class, 'create'])->name('payments.create');
        Route::post('/payments', [PaymentController::class, 'store'])->name('payments.store');
        Route::get('/payments/{payment}', [PaymentController::class, 'show'])->name('payments.show');
    });

    Route::middleware(['permission:edit-payment'])->group(function () {
        Route::get('/payments/{payment}/edit', [PaymentController::class, 'edit'])->name('payments.edit');
        Route::put('/payments/{payment}', [PaymentController::class, 'update'])->name('payments.update');
    });

    Route::delete('/payments/{payment}', [PaymentController::class, 'destroy'])
        ->middleware(['permission:delete-payment'])
        ->name('payments.destroy');

       Route::middleware(['permission:edit-user'])->group(function () {
        Route::get('/users/{user}/edit', [UserController::class, 'edit'])->name('users.edit');
        Route::put('/users/{user}', [UserController::class, 'update'])->name('users.update');
    });

    Route::delete('/users/{user}', [UserController::class, 'destroy'])
        ->middleware(['permission:delete-user'])
        ->name('users.destroy');

    Route::post('/users/{user}/reset-password', [UserController::class, 'resetPassword'])
        ->middleware(['permission:reset-user-password'])
        ->name('users.reset-password');

    // User validation
    Route::middleware(['permission:create-user'])->group(function () {
        Route::get('/users/validate', [UserValidationController::class, 'index'])->name('users.validate');
        Route::post('/users/{user}/validate', [UserValidationController::class, 'validateUser'])->name('users.validate.approve');
        Route::delete('/users/{user}/reject', [UserValidationController::class, 'reject'])->name('users.validate.reject');
    });
    // Users
    Route::middleware(['permission:create-user'])->group(function () {
        Route::get('/users', [UserController::class, 'index'])->name('users.index');
        Route::get('/users/create', [UserController::class, 'create'])->name('users.create');
        Route::post('/users', [UserController::class, 'store'])->name('users.store');
        Route::get('/users/{user}', [UserController::class, 'show'])->name('users.show');
    });

    // Roles
    Route::middleware(['permission:create-role'])->group(function () {
        Route::get('/roles', [RoleController::class, 'index'])->name('roles.index');
        Route::get('/roles/create', [RoleController::class, 'create'])->name('roles.create');
        Route::post('/roles', [RoleController::class, 'store'])->name('roles.store');
        Route::get('/roles/{role}', [RoleController::class, 'show'])->name('roles.show');
    });

    Route::middleware(['permission:edit-role-permissions'])->group(function () {
        Route::get('/roles/{role}/edit', [RoleController::class, 'edit'])->name('roles.edit');
        Route::put('/roles/{role}', [RoleController::class, 'update'])->name('roles.update');
    });

    Route::delete('/roles/{role}', [RoleController::class, 'destroy'])
        ->middleware(['permission:delete-role'])
        ->name('roles.destroy');

    Route::delete('/roles/{role}/replace/{replacement}', [RoleController::class, 'destroyAndReplace'])
        ->middleware(['permission:delete-role-with-replacement'])
        ->name('roles.destroy-and-replace');

    // Permissions
    Route::get('/permissions', [PermissionController::class, 'index'])
        ->middleware(['permission:edit-role-permissions'])
        ->name('permissions.index');

    // Activity Logs
    Route::get('/activity-logs', [ActivityLogController::class, 'index'])
        ->middleware(['permission:view-all-activity-logs,view-own-activity-logs'])
        ->name('activity-logs.index');

    //Categories
    // Categories
    Route::middleware(['permission:edit-item'])->group(function () {
        Route::resource('categories', CategoryController::class);
    });

    // Profile
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

// Routes d'API pour l'autocomplétion
Route::prefix('api')->middleware('auth')->group(function () {
    Route::get('/users/search', [App\Http\Controllers\Api\UserController::class, 'search'])->name('api.users.search');
    Route::get('/items/search', [App\Http\Controllers\Api\ItemController::class, 'search'])->name('api.items.search');
});


require __DIR__.'/auth.php';

================
File: storage/app/.gitignore
================
*
!public/
!.gitignore

================
File: storage/app/public/.gitignore
================
*
!.gitignore

================
File: storage/framework/.gitignore
================
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json

================
File: storage/framework/cache/.gitignore
================
*
!data/
!.gitignore

================
File: storage/framework/cache/data/.gitignore
================
*
!.gitignore

================
File: storage/framework/sessions/.gitignore
================
*
!.gitignore

================
File: storage/framework/testing/.gitignore
================
*
!.gitignore

================
File: storage/framework/views/.gitignore
================
*
!.gitignore

================
File: storage/logs/.gitignore
================
*
!.gitignore

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
        "./resources/**/*.blade.php",
        "./resources/**/*.js",
        "./resources/**/*.vue",
    ],
    theme: {
        extend: {
            colors: {
                primary: '#3490dc',
                secondary: '#ffed4a',
                danger: '#e3342f',
            },
        },
    },
    plugins: [],
}

================
File: tests/CreatesApplication.php
================
<?php

namespace Tests;

use Illuminate\Contracts\Console\Kernel;
use Illuminate\Foundation\Application;

trait CreatesApplication
{
    /**
     * Creates the application.
     */
    public function createApplication(): Application
    {
        $app = require __DIR__.'/../bootstrap/app.php';

        $app->make(Kernel::class)->bootstrap();

        return $app;
    }
}

================
File: tests/Feature/ExampleTest.php
================
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}

================
File: tests/TestCase.php
================
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;
}

================
File: tests/Unit/ExampleTest.php
================
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}

================
File: vite.config.js
================
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: true,
        }),
    ],
});



================================================================
End of Codebase
================================================================
